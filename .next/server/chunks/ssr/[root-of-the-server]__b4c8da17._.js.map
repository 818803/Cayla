{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/sentiment-analysis.ts"],"sourcesContent":["'use client';\n\nimport { pipeline, Pipeline, TextClassificationPipeline } from '@huggingface/transformers';\n\nexport type Emotion = 'Joy' | 'Sadness' | 'Anger' | 'Fear' | 'Surprise' | 'Disgust' | 'Love' | 'Normal' | 'Analytical';\n\n// Define a mapping from model labels to our custom emotions\nconst emotionLabelMap: Record<string, Emotion> = {\n  joy: 'Joy',\n  sadness: 'Sadness',\n  anger: 'Anger',\n  fear: 'Fear',\n  surprise: 'Surprise',\n  disgust: 'Disgust',\n  love: 'Love',\n};\n\n// Singleton to hold the classifier instance\nlet classifier: TextClassificationPipeline | null = null;\n\nasync function getClassifier() {\n  if (classifier === null) {\n    try {\n      // Use a specific model for emotion classification\n      classifier = (await pipeline('text-classification', 'bhadresh-savani/distilbert-base-uncased-emotion')) as TextClassificationPipeline;\n    } catch (error) {\n      console.error(\"Failed to load sentiment analysis model:\", error);\n      // Return a dummy function if the pipeline fails to initialize\n      return {\n        predict: async (_text: string): Promise<[{ label: string; score: number }]> => {\n            return [{ label: 'Normal', score: 1.0 }];\n        }\n      };\n    }\n  }\n  return classifier;\n}\n\nexport async function detectEmotion(text: string): Promise<Emotion> {\n    if (!text || text.trim().length === 0) {\n        return 'Normal';\n    }\n\n    try {\n        const emotionClassifier = await getClassifier();\n        if (!emotionClassifier) {\n            return 'Normal';\n        }\n\n        let result: { label: string; score: number; }[];\n        if (typeof emotionClassifier === 'function') {\n            result = await emotionClassifier(text, { top_k: 1 });\n        } else {\n            result = await emotionClassifier.predict(text);\n        }\n        \n        const topEmotion = result[0];\n\n        if (topEmotion && topEmotion.score > 0.5) {\n            return emotionLabelMap[topEmotion.label.toLowerCase()] || 'Normal';\n        }\n\n        return 'Normal';\n\n    } catch (error) {\n        console.error(\"Error during emotion detection:\", error);\n        return 'Normal'; // Fallback emotion\n    }\n}\n\nexport const avatarMap: Record<Emotion, string> = {\n    'Joy': '/assets/images/avataaars.png',\n    'Sadness': '/assets/images/avataaars copy.png',\n    'Anger': '/assets/images/avataaars copy 2.png',\n    'Fear': '/assets/images/avataaars copy 3.png',\n    'Surprise': '/assets/images/avataaars copy 4.png',\n    'Disgust': '/assets/images/avataaars copy 5.png',\n    'Love': '/assets/images/avataaars copy 6.png',\n    'Normal': '/assets/images/avataaars.png',\n    'Analytical': '/assets/images/avataaars.png',\n}; "],"names":[],"mappings":";;;;AAEA;;;;;AAFA;;AAMA,4DAA4D;AAC5D,MAAM,kBAA2C;IAC/C,KAAK;IACL,SAAS;IACT,OAAO;IACP,MAAM;IACN,UAAU;IACV,SAAS;IACT,MAAM;AACR;AAEA,4CAA4C;AAC5C,IAAI,aAAgD;AAEpD,eAAe;IACb,IAAI,eAAe,MAAM;QACvB,IAAI;YACF,kDAAkD;YAClD,aAAc,MAAM,CAAA,GAAA,0JAAA,CAAA,WAAQ,AAAD,EAAE,uBAAuB;QACtD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4CAA4C;YAC1D,8DAA8D;YAC9D,OAAO;gBACL,SAAS,OAAO;oBACZ,OAAO;wBAAC;4BAAE,OAAO;4BAAU,OAAO;wBAAI;qBAAE;gBAC5C;YACF;QACF;IACF;IACA,OAAO;AACT;AAEO,eAAe,cAAc,IAAY;IAC5C,IAAI,CAAC,QAAQ,KAAK,IAAI,GAAG,MAAM,KAAK,GAAG;QACnC,OAAO;IACX;IAEA,IAAI;QACA,MAAM,oBAAoB,MAAM;QAChC,IAAI,CAAC,mBAAmB;YACpB,OAAO;QACX;QAEA,IAAI;QACJ,IAAI,OAAO,sBAAsB,YAAY;YACzC,SAAS,MAAM,kBAAkB,MAAM;gBAAE,OAAO;YAAE;QACtD,OAAO;YACH,SAAS,MAAM,kBAAkB,OAAO,CAAC;QAC7C;QAEA,MAAM,aAAa,MAAM,CAAC,EAAE;QAE5B,IAAI,cAAc,WAAW,KAAK,GAAG,KAAK;YACtC,OAAO,eAAe,CAAC,WAAW,KAAK,CAAC,WAAW,GAAG,IAAI;QAC9D;QAEA,OAAO;IAEX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,UAAU,mBAAmB;IACxC;AACJ;AAEO,MAAM,YAAqC;IAC9C,OAAO;IACP,WAAW;IACX,SAAS;IACT,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,QAAQ;IACR,UAAU;IACV,cAAc;AAClB","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/components/chatinterface.tsx"],"sourcesContent":["'use client';\n\nimport { useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { Send } from 'lucide-react';\nimport ReactMarkdown from 'react-markdown';\nimport { ChatMessage, Emotion } from '@/lib/types';\nimport { avatarMap } from '@/lib/sentiment-analysis';\n\ninterface ChatInterfaceProps {\n  messages: ChatMessage[];\n  input: string;\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => void;\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  isLoading: boolean;\n  currentEmotion: Emotion;\n  className?: string;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({\n  messages,\n  input,\n  handleInputChange,\n  handleSubmit,\n  isLoading,\n  currentEmotion,\n  className = '',\n}) => {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      const form = event.currentTarget.form;\n      if (form) {\n        const submitEvent = new Event('submit', { bubbles: true, cancelable: true });\n        form.dispatchEvent(submitEvent);\n      }\n    }\n  };\n\n  const currentAvatar = avatarMap[currentEmotion] || avatarMap['Normal'];\n\n  return (\n    <div className={`flex flex-col h-full max-h-screen bg-white dark:bg-gray-800 rounded-4xl ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center gap-4 px-6 py-4 rounded-t-4xl border-b border-sakura-gray dark:border-gray-700\">\n        <div className=\"w-12 h-12 bg-gradient-to-br from-sakura-pink to-sakura-accent rounded-full flex-shrink-0 relative overflow-hidden ring-4 ring-white dark:ring-gray-800\">\n          <Image\n            src={currentAvatar}\n            alt=\"Cayla Avatar\"\n            fill\n            sizes=\"48px\"\n            style={{ objectFit: 'cover' }}\n            priority\n            key={currentAvatar} // Add key to force re-render on change\n          />\n        </div>\n        <div>\n          <h1 className=\"text-lg font-bold text-sakura-text dark:text-gray-100\">Chat with Cayla</h1>\n          <p className=\"text-sm text-sakura-text/70 dark:text-gray-400\">Your private AI guide for emotional clarity</p>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div ref={scrollRef} className=\"flex-1 overflow-y-auto p-6 space-y-5\">\n        {messages.map((m) => {\n          const avatarSrc = (m.sender === 'bot' && m.emotion) ? avatarMap[m.emotion] : avatarMap['Normal'];\n          return (\n            <div key={m.id} className={`flex items-end gap-3 ${m.sender === 'user' ? 'justify-end' : 'justify-start'}`}>\n              {m.sender === 'bot' && (\n                <div className=\"w-9 h-9 rounded-full bg-gradient-to-br from-sakura-pink to-sakura-accent flex-shrink-0 self-start\">\n                  <Image src={avatarSrc} alt=\"Cayla Avatar\" width={36} height={36} className=\"rounded-full\" />\n                </div>\n              )}\n              <div className={`px-4 py-2.5 rounded-2xl max-w-lg shadow-sm prose dark:prose-invert ${m.sender === 'user' \n                ? 'bg-sakura-accent text-white rounded-br-none' \n                : 'bg-sakura-gray text-sakura-text dark:bg-gray-700 dark:text-gray-200 rounded-bl-none'\n              }`}>\n                <ReactMarkdown>{m.message}</ReactMarkdown>\n              </div>\n            </div>\n          );\n        })}\n        {isLoading && (\n          <div className=\"flex items-end gap-3 justify-start\">\n            <div className=\"w-9 h-9 rounded-full bg-gradient-to-br from-sakura-pink to-sakura-dark-pink flex-shrink-0\">\n               <Image src={currentAvatar} alt=\"Cayla Avatar\" width={36} height={36} className=\"rounded-full\" />\n            </div>\n            <div className=\"p-4 rounded-2xl max-w-md shadow-sm bg-sakura-gray text-sakura-text dark:bg-gray-700 rounded-bl-none\">\n              <div className=\"flex items-center space-x-1.5\">\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-150\"></div>\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-300\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Input Form */}\n      <div className=\"p-4 border-t border-sakura-gray dark:border-gray-700 bg-white dark:bg-gray-800 rounded-b-4xl\">\n        <form onSubmit={handleSubmit} className=\"flex items-center gap-3\">\n          <textarea\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message, Cayla is listening...\"\n            rows={1}\n            className=\"flex-1 p-3 bg-sakura-gray dark:bg-gray-700 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-sakura-accent transition-all text-sakura-text dark:text-gray-200 placeholder:text-sakura-text/50 dark:placeholder:text-gray-400\"\n          />\n          <button\n            type=\"submit\"\n            disabled={isLoading || !input.trim()}\n            className=\"w-10 h-10 bg-sakura-accent text-white rounded-lg flex items-center justify-center transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:scale-100 disabled:cursor-not-allowed shadow-md hover:shadow-pink-glow\"\n          >\n            <Send size={18} />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/components/ui/switch.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\nimport { cn } from '@/lib/utils';\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-sakura-accent data-[state=unchecked]:bg-sakura-gray',\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        'pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch }; "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,OAAqB;QACpB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,8OAAC,kKAAA,CAAA,QAAsB;YACrB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,kKAAA,CAAA,OAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/components/ui/label.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst labelVariants = cva(\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label }; "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAOA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/app/chat/%5BsessionId%5D/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useChat, type Message as VercelChatMessage } from 'ai/react';\nimport { ChatMessage, Emotion } from '@/lib/types';\nimport ChatInterface from '@/components/chatinterface';\nimport { saveConversation, getConversation } from '@/lib/conversation-history';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\n\nexport default function ChatPage({ params }: { params: { sessionId: string } }) {\n  const [currentEmotion, setCurrentEmotion] = useState<Emotion>('Normal');\n  const [isShortMode, setIsShortMode] = useState(false);\n  const [initialMessages, setInitialMessages] = useState<VercelChatMessage[]>([]);\n  const [isHistoryLoaded, setIsHistoryLoaded] = useState(false);\n\n  useEffect(() => {\n    const conversation = getConversation(params.sessionId);\n    if (conversation) {\n      setInitialMessages(conversation.messages);\n    }\n    setIsHistoryLoaded(true);\n  }, [params.sessionId]);\n\n  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({\n    api: '/api/chat',\n    id: params.sessionId,\n    body: {\n      sessionId: params.sessionId,\n      isShort: isShortMode,\n    },\n    initialMessages: initialMessages,\n    onResponse: (response) => {\n      if (response.headers.has('X-Emotion')) {\n        setCurrentEmotion(response.headers.get('X-Emotion') as Emotion);\n      }\n    },\n    onFinish: (message) => {\n      // The useChat hook manages the 'messages' array.\n      // We just need to save the final state of the conversation.\n      const conversationTitle = messages.find(m => m.role === 'user')?.content.substring(0, 30) || 'New Chat';\n      saveConversation(params.sessionId, conversationTitle, messages);\n      \n      // Notify sidebar to update, especially if it's a new chat\n       if (messages.filter(m => m.role === 'user').length === 1) {\n        window.dispatchEvent(new Event('conversationHistoryChanged'));\n      }\n    },\n    onError: (err) => {\n      console.error('Chat error:', err.message);\n      setCurrentEmotion('Sad');\n    }\n  });\n  \n  // The useChat hook returns messages that are not serializable, so we need to map them.\n  const augmentedMessages: ChatMessage[] = messages.map(m => ({\n    id: m.id,\n    sender: m.role === 'user' ? 'user' : 'bot',\n    message: m.content,\n    timestamp: new Date(), // Timestamps would ideally come from the server\n  }));\n  \n  useEffect(() => {\n     if (error) {\n       // The error object from useChat is now the source of truth for errors.\n       // The onError callback handles setting the emotion.\n       // We can add any additional side-effects here if needed.\n     }\n  }, [error]);\n\n  if (!isHistoryLoaded) {\n      return (\n        <div className=\"flex justify-center items-center h-screen bg-sakura-bg\">\n          <div className=\"text-sakura-dark\">Loading conversation...</div>\n        </div>\n      );\n  }\n\n  return (\n    <div className=\"flex justify-center items-center h-screen bg-transparent\">\n       <div className=\"w-full h-full md:p-4 flex justify-center items-center\">\n            <div className=\"w-full h-full max-w-2xl md:h-full md:max-h-[900px] flex flex-col bg-white dark:bg-gray-800 rounded-none md:rounded-4xl shadow-lg border border-sakura-gray dark:border-gray-700\">\n                <div className=\"flex items-center justify-end p-4 border-b border-sakura-gray dark:border-gray-700\">\n                    <div className=\"flex items-center space-x-2\">\n                        <Switch \n                            id=\"short-mode\"\n                            checked={isShortMode}\n                            onCheckedChange={setIsShortMode}\n                        />\n                        <Label htmlFor=\"short-mode\" className=\"text-sm font-medium text-sakura-text dark:text-gray-300\">\n                            Short Answers\n                        </Label>\n                    </div>\n                </div>\n                <ChatInterface\n                    messages={augmentedMessages}\n                    input={input}\n                    handleInputChange={handleInputChange}\n                    handleSubmit={handleSubmit}\n                    isLoading={isLoading}\n                    currentEmotion={currentEmotion}\n                    className=\"h-full\"\n                />\n            </div>\n       </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}