{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/sentiment-analysis.ts"],"sourcesContent":["'use client';\n\nimport { pipeline, Pipeline } from '@huggingface/transformers';\n\ntype Emotion = 'Happy' | 'Sad' | 'Angry' | 'Annoyed' | 'Love' | 'Goofy' | 'Barf' | 'Normal';\n\n// Define a mapping from model labels to our custom emotions\nconst labelToEmotion: { [key: string]: Emotion } = {\n  'joy': 'Happy',\n  'love': 'Love',\n  'sadness': 'Sad',\n  'anger': 'Angry',\n  'disgust': 'Barf',\n  'fear': 'Annoyed', // Mapping fear to annoyed as a proxy\n  'surprise': 'Goofy', // Mapping surprise to goofy as a proxy\n};\n\nclass SentimentPipeline {\n  static task = 'emotion';\n  static model = 'j-hartmann/emotion-english-distilroberta-base';\n  static instance: Pipeline | null = null;\n\n  static async getInstance(progress_callback?: Function) {\n    if (this.instance === null) {\n      this.instance = await pipeline(this.task, this.model, { progress_callback });\n    }\n    return this.instance;\n  }\n}\n\nexport async function detectEmotion(text: string): Promise<Emotion> {\n  try {\n    const classifier = await SentimentPipeline.getInstance();\n    const results = await classifier(text, { topK: 1 });\n\n    if (results && results.length > 0) {\n      const topResult = results[0];\n      const label = topResult.label.toLowerCase();\n      // Use our mapping to get the final emotion, default to Normal\n      return labelToEmotion[label] || 'Normal';\n    }\n  } catch (error) {\n    console.error(\"Error during emotion detection:\", error);\n  }\n  \n  // Default to Normal if anything goes wrong\n  return 'Normal';\n}\n\nexport const avatarMap: Record<Emotion, string> = {\n    Normal: '/avataaars.png',\n    Happy: '/avataaars.png',\n    Angry: '/avataaars copy.png',\n    Sad: '/avataaars copy 2.png',\n    Love: '/avataaars copy 3.png',\n    Barf: '/avataaars copy 4.png',\n    Annoyed: '/avataaars copy 5.png',\n    Goofy: '/avataaars copy 6.png',\n}; "],"names":[],"mappings":";;;;AAEA;;;;;AAFA;;AAMA,4DAA4D;AAC5D,MAAM,iBAA6C;IACjD,OAAO;IACP,QAAQ;IACR,WAAW;IACX,SAAS;IACT,WAAW;IACX,QAAQ;IACR,YAAY;AACd;AAEA,MAAM;IACJ,OAAO,OAAO,UAAU;IACxB,OAAO,QAAQ,gDAAgD;IAC/D,OAAO,WAA4B,KAAK;IAExC,aAAa,YAAY,iBAA4B,EAAE;QACrD,IAAI,IAAI,CAAC,QAAQ,KAAK,MAAM;YAC1B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAA,GAAA,0JAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE;gBAAE;YAAkB;QAC5E;QACA,OAAO,IAAI,CAAC,QAAQ;IACtB;AACF;AAEO,eAAe,cAAc,IAAY;IAC9C,IAAI;QACF,MAAM,aAAa,MAAM,kBAAkB,WAAW;QACtD,MAAM,UAAU,MAAM,WAAW,MAAM;YAAE,MAAM;QAAE;QAEjD,IAAI,WAAW,QAAQ,MAAM,GAAG,GAAG;YACjC,MAAM,YAAY,OAAO,CAAC,EAAE;YAC5B,MAAM,QAAQ,UAAU,KAAK,CAAC,WAAW;YACzC,8DAA8D;YAC9D,OAAO,cAAc,CAAC,MAAM,IAAI;QAClC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;IACnD;IAEA,2CAA2C;IAC3C,OAAO;AACT;AAEO,MAAM,YAAqC;IAC9C,QAAQ;IACR,OAAO;IACP,OAAO;IACP,KAAK;IACL,MAAM;IACN,MAAM;IACN,SAAS;IACT,OAAO;AACX","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/components/chatinterface.tsx"],"sourcesContent":["'use client';\n\nimport { useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { Send } from 'lucide-react';\nimport ReactMarkdown from 'react-markdown';\nimport { ChatMessage, Emotion } from '@/lib/types';\nimport { avatarMap } from '@/lib/sentiment-analysis';\n\ninterface ChatInterfaceProps {\n  messages: ChatMessage[];\n  input: string;\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => void;\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  isLoading: boolean;\n  currentEmotion: Emotion;\n  className?: string;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({\n  messages,\n  input,\n  handleInputChange,\n  handleSubmit,\n  isLoading,\n  currentEmotion,\n  className = '',\n}) => {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      const form = event.currentTarget.form;\n      if (form) {\n        const submitEvent = new Event('submit', { bubbles: true, cancelable: true });\n        form.dispatchEvent(submitEvent);\n      }\n    }\n  };\n\n  const currentAvatar = avatarMap[currentEmotion] || avatarMap['Normal'];\n\n  return (\n    <div className={`flex flex-col h-full max-h-screen bg-white dark:bg-gray-800 rounded-4xl ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center gap-4 px-6 py-4 rounded-t-4xl border-b border-sakura-gray dark:border-gray-700\">\n        <div className=\"w-12 h-12 bg-gradient-to-br from-sakura-pink to-sakura-accent rounded-full flex-shrink-0 relative overflow-hidden ring-4 ring-white dark:ring-gray-800\">\n          <Image\n            src={currentAvatar}\n            alt=\"Cayla Avatar\"\n            fill\n            sizes=\"48px\"\n            style={{ objectFit: 'cover' }}\n            priority\n            key={currentAvatar} // Add key to force re-render on change\n          />\n        </div>\n        <div>\n          <h1 className=\"text-lg font-bold text-sakura-text dark:text-gray-100\">Chat with Cayla</h1>\n          <p className=\"text-sm text-sakura-text/70 dark:text-gray-400\">Your private AI guide for emotional clarity</p>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div ref={scrollRef} className=\"flex-1 overflow-y-auto p-6 space-y-5\">\n        {messages.map((m) => {\n          const avatarSrc = (m.sender === 'bot' && m.emotion) ? avatarMap[m.emotion] : avatarMap['Normal'];\n          return (\n            <div key={m.id} className={`flex items-end gap-3 ${m.sender === 'user' ? 'justify-end' : 'justify-start'}`}>\n              {m.sender === 'bot' && (\n                <div className=\"w-9 h-9 rounded-full bg-gradient-to-br from-sakura-pink to-sakura-accent flex-shrink-0 self-start\">\n                  <Image src={avatarSrc} alt=\"Cayla Avatar\" width={36} height={36} className=\"rounded-full\" />\n                </div>\n              )}\n              <div className={`px-4 py-2.5 rounded-2xl max-w-lg shadow-sm prose dark:prose-invert ${m.sender === 'user' \n                ? 'bg-sakura-accent text-white rounded-br-none' \n                : 'bg-sakura-gray text-sakura-text dark:bg-gray-700 dark:text-gray-200 rounded-bl-none'\n              }`}>\n                <ReactMarkdown>{m.message}</ReactMarkdown>\n              </div>\n            </div>\n          );\n        })}\n        {isLoading && (\n          <div className=\"flex items-end gap-3 justify-start\">\n            <div className=\"w-9 h-9 rounded-full bg-gradient-to-br from-sakura-pink to-sakura-dark-pink flex-shrink-0\">\n               <Image src={currentAvatar} alt=\"Cayla Avatar\" width={36} height={36} className=\"rounded-full\" />\n            </div>\n            <div className=\"p-4 rounded-2xl max-w-md shadow-sm bg-sakura-gray text-sakura-text dark:bg-gray-700 rounded-bl-none\">\n              <div className=\"flex items-center space-x-1.5\">\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-150\"></div>\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-300\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Input Form */}\n      <div className=\"p-4 border-t border-sakura-gray dark:border-gray-700 bg-white dark:bg-gray-800 rounded-b-4xl\">\n        <form onSubmit={handleSubmit} className=\"flex items-center gap-3\">\n          <textarea\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message, Cayla is listening...\"\n            rows={1}\n            className=\"flex-1 p-3 bg-sakura-gray dark:bg-gray-700 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-sakura-accent transition-all text-sakura-text dark:text-gray-200 placeholder:text-sakura-text/50 dark:placeholder:text-gray-400\"\n          />\n          <button\n            type=\"submit\"\n            disabled={isLoading || !input.trim()}\n            className=\"w-10 h-10 bg-sakura-accent text-white rounded-lg flex items-center justify-center transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:scale-100 disabled:cursor-not-allowed shadow-md hover:shadow-pink-glow\"\n          >\n            <Send size={18} />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/app/chat/%5BsessionId%5D/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport ChatInterface from '@/components/chatinterface';\nimport { ChatMessage, Emotion } from '@/lib/types';\nimport { saveConversation } from '@/lib/conversation-history';\n\nexport default function ChatPage() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentEmotion, setCurrentEmotion] = useState<Emotion>('Normal');\n  const params = useParams();\n  const sessionId = params.sessionId as string;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!input.trim() || !sessionId) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      sender: 'user',\n      message: input,\n      timestamp: new Date(),\n    };\n    \n    // If this is the first user message, save it to history\n    if (messages.filter(m => m.sender === 'user').length === 0) {\n      const newTitle = input.substring(0, 30) + (input.length > 30 ? '...' : '');\n      saveConversation(sessionId, newTitle);\n      // Notify other components that history has changed\n      window.dispatchEvent(new Event('conversationHistoryChanged'));\n    }\n\n    setMessages((prev) => [...prev, userMessage]);\n    const currentInput = input;\n    setInput('');\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: currentInput, sessionId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setCurrentEmotion(data.emotion || 'Normal');\n\n      const botMessage: ChatMessage = {\n        id: Date.now().toString(),\n        sender: 'bot',\n        message: data.reply,\n        timestamp: new Date(),\n        emotion: data.emotion,\n      };\n\n      setMessages((prev) => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error fetching chat response:', error);\n      setCurrentEmotion('Sad');\n      const errorMessage: ChatMessage = {\n        id: Date.now().toString(),\n        sender: 'bot',\n        message: 'Sorry, I had trouble connecting. Please try again in a moment.',\n        timestamp: new Date(),\n        emotion: 'Sad'\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center items-center h-screen bg-transparent\">\n       <div className=\"w-full h-full md:p-4 flex justify-center items-center\">\n            <div className=\"w-full h-full max-w-2xl md:h-full md:max-h-[900px] flex flex-col bg-white dark:bg-gray-800 rounded-none md:rounded-4xl shadow-lg border border-sakura-gray dark:border-gray-700\">\n                <ChatInterface\n                    messages={messages}\n                    input={input}\n                    handleInputChange={handleInputChange}\n                    handleSubmit={handleSubmit}\n                    isLoading={isLoading}\n                    currentEmotion={currentEmotion}\n                    className=\"h-full\"\n                />\n            </div>\n       </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;;;;;AANA;;;;;;AAQe,SAAS;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAC1D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAC9D,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,YAAY,OAAO,SAAS;IAElC,MAAM,oBAAoB,CAAC;QACzB,SAAS,EAAE,MAAM,CAAC,KAAK;IACzB;IAEA,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW;QAEjC,MAAM,cAA2B;YAC/B,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,QAAQ;YACR,SAAS;YACT,WAAW,IAAI;QACjB;QAEA,wDAAwD;QACxD,IAAI,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,QAAQ,MAAM,KAAK,GAAG;YAC1D,MAAM,WAAW,MAAM,SAAS,CAAC,GAAG,MAAM,CAAC,MAAM,MAAM,GAAG,KAAK,QAAQ,EAAE;YACzE,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,WAAW;YAC5B,mDAAmD;YACnD,OAAO,aAAa,CAAC,IAAI,MAAM;QACjC;QAEA,YAAY,CAAC,OAAS;mBAAI;gBAAM;aAAY;QAC5C,MAAM,eAAe;QACrB,SAAS;QACT,aAAa;QAEb,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,aAAa;gBACxC,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE,SAAS;oBAAc;gBAAU;YAC1D;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,SAAS,UAAU,EAAE;YACrD;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,kBAAkB,KAAK,OAAO,IAAI;YAElC,MAAM,aAA0B;gBAC9B,IAAI,KAAK,GAAG,GAAG,QAAQ;gBACvB,QAAQ;gBACR,SAAS,KAAK,KAAK;gBACnB,WAAW,IAAI;gBACf,SAAS,KAAK,OAAO;YACvB;YAEA,YAAY,CAAC,OAAS;uBAAI;oBAAM;iBAAW;QAC7C,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,kBAAkB;YAClB,MAAM,eAA4B;gBAChC,IAAI,KAAK,GAAG,GAAG,QAAQ;gBACvB,QAAQ;gBACR,SAAS;gBACT,WAAW,IAAI;gBACf,SAAS;YACX;YACA,YAAY,CAAC,OAAS;uBAAI;oBAAM;iBAAa;QAC/C,SAAU;YACR,aAAa;QACf;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACZ,cAAA,8OAAC;YAAI,WAAU;sBACV,cAAA,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC,mIAAA,CAAA,UAAa;oBACV,UAAU;oBACV,OAAO;oBACP,mBAAmB;oBACnB,cAAc;oBACd,WAAW;oBACX,gBAAgB;oBAChB,WAAU;;;;;;;;;;;;;;;;;;;;;AAM9B","debugId":null}}]
}