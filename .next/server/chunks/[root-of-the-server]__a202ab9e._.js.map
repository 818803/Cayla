{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/llm-service.ts"],"sourcesContent":["// lib/llm-service.ts\nexport interface LLMMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\nexport interface LLMResponse {\n  message: string;\n  error?: string;\n}\n\nexport class LLMService {\n  private apiKey: string;\n  private baseUrl: string;\n  private model: string;\n\n  constructor(apiKey: string, model: string = 'gpt-3.5-turbo') {\n    this.apiKey = apiKey;\n    this.baseUrl = 'https://api.openai.com/v1';\n    this.model = model;\n  }\n\n  async generateResponse(messages: LLMMessage[]): Promise<LLMResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: messages,\n          max_tokens: 1000,\n          temperature: 0.7,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return {\n        message: data.choices[0].message.content,\n      };\n    } catch (error) {\n      console.error('LLM API Error:', error);\n      return {\n        message: 'Sorry, I encountered an error processing your request.',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // For other LLM providers like Anthropic Claude\n  async generateResponseClaude(messages: LLMMessage[]): Promise<LLMResponse> {\n    try {\n      const response = await fetch('https://api.anthropic.com/v1/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n          'anthropic-version': '2023-06-01',\n        },\n        body: JSON.stringify({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1000,\n          messages: messages.filter(m => m.role !== 'system'),\n          system: messages.find(m => m.role === 'system')?.content,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Claude API request failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return {\n        message: data.content[0].text,\n      };\n    } catch (error) {\n      console.error('Claude API Error:', error);\n      return {\n        message: 'Sorry, I encountered an error processing your request.',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n}"],"names":[],"mappings":"AAAA,qBAAqB;;;;AAWd,MAAM;IACH,OAAe;IACf,QAAgB;IAChB,MAAc;IAEtB,YAAY,MAAc,EAAE,QAAgB,eAAe,CAAE;QAC3D,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,KAAK,GAAG;IACf;IAEA,MAAM,iBAAiB,QAAsB,EAAwB;QACnE,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;gBAC/D,QAAQ;gBACR,SAAS;oBACP,gBAAgB;oBAChB,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE;gBAC1C;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,OAAO,IAAI,CAAC,KAAK;oBACjB,UAAU;oBACV,YAAY;oBACZ,aAAa;gBACf;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;YAC1D;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO;gBACL,SAAS,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;YAC1C;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kBAAkB;YAChC,OAAO;gBACL,SAAS;gBACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD;QACF;IACF;IAEA,gDAAgD;IAChD,MAAM,uBAAuB,QAAsB,EAAwB;QACzE,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,yCAAyC;gBACpE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;oBAChB,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE;oBACxC,qBAAqB;gBACvB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,OAAO;oBACP,YAAY;oBACZ,UAAU,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK;oBAC1C,QAAQ,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,WAAW;gBACnD;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,SAAS,MAAM,EAAE;YACjE;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO;gBACL,SAAS,KAAK,OAAO,CAAC,EAAE,CAAC,IAAI;YAC/B;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO;gBACL,SAAS;gBACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/enhanced-chatbot.ts"],"sourcesContent":["import { LLMService, LLMMessage } from './llm-service';\n\nexport class EnhancedChatbot {\n  private llmService: LLMService;\n  private conversationHistory: LLMMessage[] = [];\n  private systemPrompt: string;\n\n  constructor(apiKey: string, model: string = 'gpt-3.5-turbo') {\n    this.llmService = new LLMService(apiKey, model);\n    this.systemPrompt = `You are a helpful AI assistant. You provide accurate, helpful, and engaging responses to user questions. You can discuss a wide range of topics and help with various tasks.`;\n    \n    // Initialize with system message\n    this.conversationHistory.push({\n      role: 'system',\n      content: this.systemPrompt\n    });\n  }\n\n  async processMessage(userMessage: string): Promise<string> {\n    // Add user message to history\n    this.conversationHistory.push({\n      role: 'user',\n      content: userMessage\n    });\n\n    // Check for predefined responses first (your existing logic)\n    const predefinedResponse = this.checkPredefinedResponses(userMessage);\n    if (predefinedResponse) {\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: predefinedResponse\n      });\n      return predefinedResponse;\n    }\n\n    // Use LLM for complex queries\n    const response = await this.llmService.generateResponse(this.conversationHistory);\n    \n    if (!response.error) {\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: response.message\n      });\n    }\n\n    // Keep conversation history manageable (last 10 exchanges)\n    if (this.conversationHistory.length > 21) { // 1 system + 20 messages\n      this.conversationHistory = [\n        this.conversationHistory[0], // Keep system message\n        ...this.conversationHistory.slice(-20)\n      ];\n    }\n\n    return response.message;\n  }\n\n  private checkPredefinedResponses(message: string): string | null {\n    const lowerMessage = message.toLowerCase();\n    \n    // Your existing predefined responses\n    if (lowerMessage.includes('hi') || lowerMessage.includes('hello')) {\n      return 'Hello! How can I help you today?';\n    }\n    \n    if (lowerMessage.includes('time')) {\n      return `The current time is ${new Date().toLocaleTimeString()}`;\n    }\n    \n    if (lowerMessage.includes('weather')) {\n      return 'I can help you with weather information. What location would you like to know about?';\n    }\n\n    // Add more predefined responses as needed\n    \n    return null; // No predefined response found\n  }\n\n  clearHistory(): void {\n    this.conversationHistory = [{\n      role: 'system',\n      content: this.systemPrompt\n    }];\n  }\n\n  setSystemPrompt(prompt: string): void {\n    this.systemPrompt = prompt;\n    this.conversationHistory[0] = {\n      role: 'system',\n      content: prompt\n    };\n  }\n} "],"names":[],"mappings":";;;AAAA;;AAEO,MAAM;IACH,WAAuB;IACvB,sBAAoC,EAAE,CAAC;IACvC,aAAqB;IAE7B,YAAY,MAAc,EAAE,QAAgB,eAAe,CAAE;QAC3D,IAAI,CAAC,UAAU,GAAG,IAAI,8HAAA,CAAA,aAAU,CAAC,QAAQ;QACzC,IAAI,CAAC,YAAY,GAAG,CAAC,4KAA4K,CAAC;QAElM,iCAAiC;QACjC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAC5B,MAAM;YACN,SAAS,IAAI,CAAC,YAAY;QAC5B;IACF;IAEA,MAAM,eAAe,WAAmB,EAAmB;QACzD,8BAA8B;QAC9B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAC5B,MAAM;YACN,SAAS;QACX;QAEA,6DAA6D;QAC7D,MAAM,qBAAqB,IAAI,CAAC,wBAAwB,CAAC;QACzD,IAAI,oBAAoB;YACtB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;gBAC5B,MAAM;gBACN,SAAS;YACX;YACA,OAAO;QACT;QAEA,8BAA8B;QAC9B,MAAM,WAAW,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,mBAAmB;QAEhF,IAAI,CAAC,SAAS,KAAK,EAAE;YACnB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;gBAC5B,MAAM;gBACN,SAAS,SAAS,OAAO;YAC3B;QACF;QAEA,2DAA2D;QAC3D,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,IAAI;YACxC,IAAI,CAAC,mBAAmB,GAAG;gBACzB,IAAI,CAAC,mBAAmB,CAAC,EAAE;mBACxB,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;aACpC;QACH;QAEA,OAAO,SAAS,OAAO;IACzB;IAEQ,yBAAyB,OAAe,EAAiB;QAC/D,MAAM,eAAe,QAAQ,WAAW;QAExC,qCAAqC;QACrC,IAAI,aAAa,QAAQ,CAAC,SAAS,aAAa,QAAQ,CAAC,UAAU;YACjE,OAAO;QACT;QAEA,IAAI,aAAa,QAAQ,CAAC,SAAS;YACjC,OAAO,CAAC,oBAAoB,EAAE,IAAI,OAAO,kBAAkB,IAAI;QACjE;QAEA,IAAI,aAAa,QAAQ,CAAC,YAAY;YACpC,OAAO;QACT;QAEA,0CAA0C;QAE1C,OAAO,MAAM,+BAA+B;IAC9C;IAEA,eAAqB;QACnB,IAAI,CAAC,mBAAmB,GAAG;YAAC;gBAC1B,MAAM;gBACN,SAAS,IAAI,CAAC,YAAY;YAC5B;SAAE;IACJ;IAEA,gBAAgB,MAAc,EAAQ;QACpC,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,mBAAmB,CAAC,EAAE,GAAG;YAC5B,MAAM;YACN,SAAS;QACX;IACF;AACF","debugId":null}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/chat-utils.ts"],"sourcesContent":["// lib/chat-utils.ts\nimport { nanoid } from 'nanoid';\n\nexport interface MessageValidation {\n  isValid: boolean;\n  error?: string;\n}\n\nexport interface CrisisKeywords {\n  high: string[];\n  medium: string[];\n}\n\nexport function validateMessage(message: any): MessageValidation {\n  if (!message) {\n    return { isValid: false, error: 'Message is required' };\n  }\n\n  if (typeof message !== 'string') {\n    return { isValid: false, error: 'Message must be a string' };\n  }\n\n  if (message.trim().length === 0) {\n    return { isValid: false, error: 'Message cannot be empty' };\n  }\n\n  if (message.length > 2000) {\n    return { isValid: false, error: 'Message is too long (max 2000 characters)' };\n  }\n\n  // Check for potential spam or abuse\n  const suspiciousPatterns = [\n    /(.)\\1{20,}/i, // Repeated characters\n    /https?:\\/\\/[^\\s]+/gi, // URLs (might want to allow these)\n  ];\n\n  for (const pattern of suspiciousPatterns) {\n    if (pattern.test(message)) {\n      return { isValid: false, error: 'Message contains suspicious content' };\n    }\n  }\n\n  return { isValid: true };\n}\n\nexport function detectCrisisKeywords(message: string): CrisisKeywords {\n  const highRiskKeywords = [\n    'kill myself', 'end my life', 'want to die', 'suicide', 'suicidal',\n    'hurt myself', 'cut myself', 'harm myself', 'self harm', 'overdose',\n    'jump off', 'hanging myself', 'pills to die', 'razor', 'blade',\n    'no point living', 'everyone would be better without me',\n    'planning to', 'going to hurt', 'going to kill'\n  ];\n\n  const mediumRiskKeywords = [\n    'worthless', 'hopeless', 'pointless', 'useless', 'burden',\n    'hate myself', 'wish I was dead', 'disappear forever',\n    'tired of living', 'can\\'t go on', 'give up', 'nothing matters',\n    'dark thoughts', 'scary thoughts', 'intrusive thoughts',\n    'cutting', 'burning', 'hitting myself', 'self injury'\n  ];\n\n  const foundHigh = highRiskKeywords.filter(keyword => \n    message.includes(keyword)\n  );\n\n  const foundMedium = mediumRiskKeywords.filter(keyword => \n    message.includes(keyword)\n  );\n\n  return {\n    high: foundHigh,\n    medium: foundMedium\n  };\n}\n\nexport function generateSessionId(): string {\n  return `session_${nanoid(16)}`;\n}\n\nexport function sanitizeForLogging(message: string): string {\n  // Remove or mask sensitive information for logging\n  return message\n    .replace(/\\b\\d{3}-\\d{2}-\\d{4}\\b/g, '[SSN]') // SSN\n    .replace(/\\b\\d{4}\\s?\\d{4}\\s?\\d{4}\\s?\\d{4}\\b/g, '[CARD]') // Credit card\n    .replace(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, '[EMAIL]') // Email\n    .replace(/\\b\\d{3}-\\d{3}-\\d{4}\\b/g, '[PHONE]'); // Phone number\n}\n\nexport function getEmotionalSupportResources(): string[] {\n  return [\n    \"Crisis Text Line: Text HOME to 741741\",\n    \"National Suicide Prevention Lifeline: 988\",\n    \"SAMHSA National Helpline: 1-800-662-4357\",\n    \"Teen Line: 1-800-852-8336 (6 PM - 10 PM PST)\",\n    \"National Eating Disorders Association: 1-800-931-2237\",\n    \"LGBTQ National Hotline: 1-888-843-4564\",\n    \"National Domestic Violence Hotline: 1-800-799-7233\"\n  ];\n}\n\nexport function formatCrisisResponse(userMessage: string, botResponse: string): string {\n  const keywords = detectCrisisKeywords(userMessage.toLowerCase());\n  \n  if (keywords.high.length > 0) {\n    return `${botResponse}\\n\\n🚨 **Immediate Support Available:**\\n${getEmotionalSupportResources().slice(0, 3).map(resource => `• ${resource}`).join('\\n')}\\n\\nYou matter, and help is available right now.`;\n  }\n  \n  if (keywords.medium.length > 0) {\n    return `${botResponse}\\n\\n💙 **Support Resources:**\\n${getEmotionalSupportResources().slice(0, 2).map(resource => `• ${resource}`).join('\\n')}`;\n  }\n  \n  return botResponse;\n}"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;;;AACpB;;AAYO,SAAS,gBAAgB,OAAY;IAC1C,IAAI,CAAC,SAAS;QACZ,OAAO;YAAE,SAAS;YAAO,OAAO;QAAsB;IACxD;IAEA,IAAI,OAAO,YAAY,UAAU;QAC/B,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2B;IAC7D;IAEA,IAAI,QAAQ,IAAI,GAAG,MAAM,KAAK,GAAG;QAC/B,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0B;IAC5D;IAEA,IAAI,QAAQ,MAAM,GAAG,MAAM;QACzB,OAAO;YAAE,SAAS;YAAO,OAAO;QAA4C;IAC9E;IAEA,oCAAoC;IACpC,MAAM,qBAAqB;QACzB;QACA;KACD;IAED,KAAK,MAAM,WAAW,mBAAoB;QACxC,IAAI,QAAQ,IAAI,CAAC,UAAU;YACzB,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAsC;QACxE;IACF;IAEA,OAAO;QAAE,SAAS;IAAK;AACzB;AAEO,SAAS,qBAAqB,OAAe;IAClD,MAAM,mBAAmB;QACvB;QAAe;QAAe;QAAe;QAAW;QACxD;QAAe;QAAc;QAAe;QAAa;QACzD;QAAY;QAAkB;QAAgB;QAAS;QACvD;QAAmB;QACnB;QAAe;QAAiB;KACjC;IAED,MAAM,qBAAqB;QACzB;QAAa;QAAY;QAAa;QAAW;QACjD;QAAe;QAAmB;QAClC;QAAmB;QAAgB;QAAW;QAC9C;QAAiB;QAAkB;QACnC;QAAW;QAAW;QAAkB;KACzC;IAED,MAAM,YAAY,iBAAiB,MAAM,CAAC,CAAA,UACxC,QAAQ,QAAQ,CAAC;IAGnB,MAAM,cAAc,mBAAmB,MAAM,CAAC,CAAA,UAC5C,QAAQ,QAAQ,CAAC;IAGnB,OAAO;QACL,MAAM;QACN,QAAQ;IACV;AACF;AAEO,SAAS;IACd,OAAO,CAAC,QAAQ,EAAE,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD,EAAE,KAAK;AAChC;AAEO,SAAS,mBAAmB,OAAe;IAChD,mDAAmD;IACnD,OAAO,QACJ,OAAO,CAAC,0BAA0B,SAAS,MAAM;KACjD,OAAO,CAAC,sCAAsC,UAAU,cAAc;KACtE,OAAO,CAAC,wDAAwD,WAAW,QAAQ;KACnF,OAAO,CAAC,0BAA0B,YAAY,eAAe;AAClE;AAEO,SAAS;IACd,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AACH;AAEO,SAAS,qBAAqB,WAAmB,EAAE,WAAmB;IAC3E,MAAM,WAAW,qBAAqB,YAAY,WAAW;IAE7D,IAAI,SAAS,IAAI,CAAC,MAAM,GAAG,GAAG;QAC5B,OAAO,GAAG,YAAY,yCAAyC,EAAE,+BAA+B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA,WAAY,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,gDAAgD,CAAC;IAC3M;IAEA,IAAI,SAAS,MAAM,CAAC,MAAM,GAAG,GAAG;QAC9B,OAAO,GAAG,YAAY,+BAA+B,EAAE,+BAA+B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAA,WAAY,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,OAAO;IACjJ;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { EnhancedChatbot } from '@/lib/enhanced-chatbot';\nimport { rateLimit } from '@/lib/rate-limit';\nimport { validateMessage, detectCrisisKeywords, generateSessionId } from '@/lib/chat-utils';\n\n// Enhanced in-memory store with conversation metadata\ninterface ConversationData {\n  chatbot: EnhancedChatbot;\n  createdAt: Date;\n  lastActivity: Date;\n  messageCount: number;\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\nconst conversations = new Map<string, ConversationData>();\n\n// Clean up inactive sessions (run every hour in production)\nconst CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 hour\nconst SESSION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 hours\n\nsetInterval(() => {\n  const now = new Date();\n  for (const [sessionId, data] of conversations.entries()) {\n    if (now.getTime() - data.lastActivity.getTime() > SESSION_TIMEOUT) {\n      conversations.delete(sessionId);\n      console.log(`Cleaned up inactive session: ${sessionId}`);\n    }\n  }\n}, CLEANUP_INTERVAL);\n\nfunction createEnhancedSystemPrompt(): string {\n  return `You are Cayla, a compassionate AI companion specializing in emotional support for teenagers and young adults. Your core principles:\n\nEMOTIONAL SUPPORT APPROACH:\n- Be genuinely warm, empathetic, and non-judgmental\n- Use active listening techniques - reflect back what you hear\n- Ask open-ended questions to help users explore their feelings\n- Validate emotions while gently challenging unhelpful thought patterns\n- Offer perspective without being preachy or dismissive\n\nCOMMUNICATION STYLE:\n- Conversational and slightly informal, like a wise friend\n- Use \"I\" statements when sharing insights (\"I notice...\", \"I wonder if...\")\n- Match the user's emotional tone while remaining stable and supportive\n- Avoid clinical language - speak naturally and warmly\n- Show genuine curiosity about their experience\n\nSAFETY AWARENESS:\n- Watch for signs of self-harm, suicidal ideation, or crisis situations\n- If you detect serious risk, gently encourage professional help\n- Never dismiss concerning statements, even if they seem casual\n- Provide crisis resources when appropriate\n\nBOUNDARIES:\n- You're a supportive friend, not a therapist or counselor\n- Don't diagnose mental health conditions\n- Encourage professional help for persistent or severe issues\n- Respect privacy while being genuinely caring\n\nRemember: Your goal is to help users feel heard, understood, and less alone while building their own emotional awareness and coping skills.`;\n}\n\nfunction getChatbot(sessionId: string): ConversationData {\n  if (!conversations.has(sessionId)) {\n    console.log(`Creating new chatbot session for ID: ${sessionId}`);\n    const chatbot = new EnhancedChatbot(process.env.OPENAI_API_KEY || '');\n    \n    chatbot.setSystemPrompt(createEnhancedSystemPrompt());\n    \n    const conversationData: ConversationData = {\n      chatbot,\n      createdAt: new Date(),\n      lastActivity: new Date(),\n      messageCount: 0,\n      riskLevel: 'low'\n    };\n    \n    conversations.set(sessionId, conversationData);\n    return conversationData;\n  }\n  \n  const data = conversations.get(sessionId)!;\n  data.lastActivity = new Date();\n  return data;\n}\n\nasync function assessRiskLevel(message: string, currentLevel: string): Promise<'low' | 'medium' | 'high'> {\n  const crisisKeywords = detectCrisisKeywords(message.toLowerCase());\n  \n  if (crisisKeywords.high.length > 0) {\n    return 'high';\n  } else if (crisisKeywords.medium.length > 0) {\n    return 'medium';\n  }\n  \n  return currentLevel as 'low' | 'medium' | 'high';\n}\n\nfunction addCrisisResources(response: string, riskLevel: 'low' | 'medium' | 'high'): string {\n  if (riskLevel === 'high') {\n    return response + \"\\n\\n💙 If you're having thoughts of self-harm, please reach out for immediate support:\\n\" +\n           \"• Crisis Text Line: Text HOME to 741741\\n\" +\n           \"• National Suicide Prevention Lifeline: 988\\n\" +\n           \"• Or contact emergency services: 911\\n\\n\" +\n           \"You don't have to go through this alone.\";\n  } else if (riskLevel === 'medium') {\n    return response + \"\\n\\n💙 Remember, if things feel overwhelming, support is available:\\n\" +\n           \"• Crisis Text Line: Text HOME to 741741\\n\" +\n           \"• National Suicide Prevention Lifeline: 988\";\n  }\n  \n  return response;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Rate limiting\n    const rateLimitResult = await rateLimit(request);\n    if (!rateLimitResult.success) {\n      return NextResponse.json(\n        { error: 'Too many requests. Please wait a moment before sending another message.' },\n        { status: 429 }\n      );\n    }\n\n    const body = await request.json();\n    const { message, sessionId: providedSessionId } = body;\n\n    // Validate and sanitize input\n    const validationResult = validateMessage(message);\n    if (!validationResult.isValid) {\n      return NextResponse.json({ error: validationResult.error }, { status: 400 });\n    }\n\n    // Generate session ID if not provided\n    const sessionId = providedSessionId || generateSessionId();\n\n    const conversationData = getChatbot(sessionId);\n    conversationData.messageCount++;\n\n    // Assess risk level based on message content\n    const newRiskLevel = await assessRiskLevel(message, conversationData.riskLevel);\n    conversationData.riskLevel = newRiskLevel;\n\n    // Log concerning messages for monitoring (in production, use proper logging service)\n    if (newRiskLevel === 'high') {\n      console.warn(`HIGH RISK MESSAGE detected in session ${sessionId}:`, {\n        timestamp: new Date().toISOString(),\n        messageLength: message.length,\n        sessionAge: new Date().getTime() - conversationData.createdAt.getTime()\n      });\n    }\n\n    // Process the message through the chatbot\n    let response = await conversationData.chatbot.processMessage(message);\n    \n    // Add crisis resources if needed\n    response = addCrisisResources(response, newRiskLevel);\n\n    // Prepare response data\n    const responseData = {\n      reply: response,\n      sessionId,\n      timestamp: new Date().toISOString(),\n      messageCount: conversationData.messageCount,\n      // Don't expose risk level to client for privacy\n    };\n\n    return NextResponse.json(responseData);\n\n  } catch (error) {\n    console.error('Chat API Error:', error);\n    \n    // Provide a compassionate error message for users\n    const fallbackResponse = {\n      reply: \"I'm sorry, I'm having some technical difficulties right now. Your feelings and what you're going through are important to me. Please try again in a moment, and if you need immediate support, remember that crisis resources are always available.\",\n      timestamp: new Date().toISOString(),\n      error: true\n    };\n\n    return NextResponse.json(fallbackResponse, { status: 500 });\n  }\n}\n\nexport async function GET() {\n  const stats = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    activeSessions: conversations.size,\n    uptime: process.uptime()\n  };\n  \n  return NextResponse.json(stats);\n}\n\n// Optional: Session cleanup endpoint for manual cleanup\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const sessionId = searchParams.get('sessionId');\n    \n    if (sessionId && conversations.has(sessionId)) {\n      conversations.delete(sessionId);\n      return NextResponse.json({ message: 'Session cleaned up successfully' });\n    }\n    \n    return NextResponse.json({ error: 'Session not found' }, { status: 404 });\n  } catch (error) {\n    return NextResponse.json({ error: 'Cleanup failed' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}