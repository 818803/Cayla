{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/app/api/motivation/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { EnhancedChatbot } from '@/lib/ai-provider';\n\nfunction getMotivationPrompt(type: 'positive' | 'tough'): string {\n    if (type === 'tough') {\n        return \"You are a tough-love motivational coach. Your goal is to give a user a short, powerful, no-excuses message to get them motivated. It should be direct, blunt, and inspiring. Focus on action and overcoming self-doubt. The user needs a kick in the pants. Generate a single motivational phrase or a 2-3 sentence paragraph.\";\n    }\n    // Default to positive\n    return \"You are a kind and compassionate motivational coach. Your goal is to give a user a short, powerful, and uplifting message. It should be full of encouragement, self-love, and belief in their potential. The user needs gentle and positive reinforcement. Generate a single motivational phrase or a 2-3 sentence paragraph.\";\n}\n\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { type } = body;\n\n    if (type !== 'positive' && type !== 'tough') {\n      return NextResponse.json({ error: 'Invalid motivation type specified' }, { status: 400 });\n    }\n\n    const systemPrompt = getMotivationPrompt(type);\n    \n    const chatbot = new EnhancedChatbot({\n      openaiKey: process.env.OPENAI_API_KEY || '',\n      systemPrompt: systemPrompt,\n    });\n      \n    const response = await chatbot.processMessage(\"Give me a motivational message.\");\n\n    if (response.error) {\n      console.error('Motivation API Error from AI Provider:', response.error);\n      return NextResponse.json({ error: response.message || 'Internal server error' }, { status: 500 });\n    }\n    \n    return NextResponse.json({ \n      message: response.message,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Motivation API Error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;;;;;;;;AAGA,SAAS,oBAAoB,IAA0B;IACnD,IAAI,SAAS,SAAS;QAClB,OAAO;IACX;IACA,sBAAsB;IACtB,OAAO;AACX;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,IAAI,SAAS,cAAc,SAAS,SAAS;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,eAAe,oBAAoB;QAEzC,MAAM,UAAU,IAAI,gBAAgB;YAClC,WAAW,QAAQ,GAAG,CAAC,cAAc,IAAI;YACzC,cAAc;QAChB;QAEA,MAAM,WAAW,MAAM,QAAQ,cAAc,CAAC;QAE9C,IAAI,SAAS,KAAK,EAAE;YAClB,QAAQ,KAAK,CAAC,0CAA0C,SAAS,KAAK;YACtE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,SAAS,OAAO,IAAI;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QACjG;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS,SAAS,OAAO;YACzB,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}