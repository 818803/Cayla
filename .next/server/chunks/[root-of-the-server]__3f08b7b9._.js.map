{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/chatbot.ts"],"sourcesContent":["// lib/chatbot.ts\n\nexport interface ChatMessage {\n  id: string;\n  message: string;\n  sender: 'user' | 'bot';\n  timestamp: Date;\n}\n\nexport class CasualChatbot {\n  private isReady: boolean = true; // Start ready since we're using pattern matching\n\n  constructor() {\n    console.log('Casual chatbot initialized');\n  }\n\n  chat(userMessage: string): string {\n    if (!userMessage || typeof userMessage !== 'string') {\n      return \"I didn't catch that, could you say something?\";\n    }\n\n    const msg = userMessage.toLowerCase().trim();\n    \n    // Greeting patterns\n    if (this.matchesPattern(msg, ['hi', 'hello', 'hey', 'sup', 'yo'])) {\n      const greetings = [\"hey there!\", \"what's up?\", \"hi! how's it going?\", \"yo!\", \"hey!\"];\n      return this.getRandomResponse(greetings);\n    }\n\n    // How are you patterns\n    if (this.matchesPattern(msg, ['how are you', 'how\\'re you', 'how r u'])) {\n      const responses = [\"i'm doing alright, you?\", \"pretty good tbh\", \"can't complain\", \"doing well, thanks!\"];\n      return this.getRandomResponse(responses);\n    }\n\n    // Thanks patterns\n    if (this.matchesPattern(msg, ['thanks', 'thank you', 'thx'])) {\n      const responses = [\"no problem!\", \"you're welcome\", \"anytime\", \"np!\", \"glad to help\"];\n      return this.getRandomResponse(responses);\n    }\n\n    // Goodbye patterns\n    if (this.matchesPattern(msg, ['bye', 'goodbye', 'see you', 'later', 'gtg'])) {\n      const responses = [\"see ya!\", \"later!\", \"catch you later\", \"bye!\", \"take care\"];\n      return this.getRandomResponse(responses);\n    }\n\n    // Question patterns\n    if (msg.includes('what') || msg.includes('how') || msg.includes('why') || msg.includes('when') || msg.includes('where')) {\n      const responses = [\n        \"that's a good question, not sure though\",\n        \"hmm, i'd have to think about that\",\n        \"interesting question\",\n        \"wish i knew the answer to that\",\n        \"you got me there\"\n      ];\n      return this.getRandomResponse(responses);\n    }\n\n    // Compliment patterns\n    if (this.matchesPattern(msg, ['cool', 'awesome', 'nice', 'great', 'amazing'])) {\n      const responses = [\"right?\", \"ikr!\", \"totally\", \"glad you think so\", \"thanks!\"];\n      return this.getRandomResponse(responses);\n    }\n\n    // Default casual responses\n    const defaultResponses = [\n      \"that's interesting\",\n      \"tell me more about that\",\n      \"i see what you mean\",\n      \"fair point\",\n      \"makes sense\",\n      \"yeah i get that\",\n      \"interesting take\"\n    ];\n\n    return this.getRandomResponse(defaultResponses);\n  }\n\n  private matchesPattern(message: string, patterns: string[]): boolean {\n    return patterns.some(pattern => message.includes(pattern));\n  }\n\n  private getRandomResponse(responses: string[]): string {\n    const response = responses[Math.floor(Math.random() * responses.length)];\n    \n    // Add casual elements occasionally\n    if (Math.random() < 0.15) {\n      const casualElements = ['lol', 'haha', 'btw', 'tbh'];\n      const element = casualElements[Math.floor(Math.random() * casualElements.length)];\n      return `${response} ${element}`;\n    }\n\n    return response;\n  }\n\n  // Get a random conversation starter\n  getConversationStarter(): string {\n    const starters = [\n      \"hey, what's up?\",\n      \"how's your day going?\",\n      \"what's new?\",\n      \"yo, how are you?\",\n      \"what's happening?\",\n      \"sup!\",\n      \"how's it going?\",\n      \"what's good?\"\n    ];\n    \n    return starters[Math.floor(Math.random() * starters.length)];\n  }\n\n  // Check if the chatbot is ready to chat\n  isModelReady(): boolean {\n    return this.isReady;\n  }\n\n  // Add some learning capability (simple pattern storage)\n  learn(userInput: string, botResponse: string) {\n    // For now, just log the interaction\n    console.log('Learning from interaction:', { userInput, botResponse });\n  }\n}\n\n// Create a singleton instance\nlet chatbotInstance: CasualChatbot | null = null;\n\nexport const getChatbot = (): CasualChatbot => {\n  if (!chatbotInstance) {\n    chatbotInstance = new CasualChatbot();\n  }\n  return chatbotInstance;\n};\n\nexport const chatbot = getChatbot();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/training.ts"],"sourcesContent":["// lib/training.ts\nexport interface TrainingData {\n  input: string;\n  output: string;\n}\n\nexport interface ChatbotModel {\n  responses: Map<string, string[]>;\n  keywords: Map<string, string[]>;\n}\n\n// Simple pattern-based training data for casual, short responses\nexport const trainingData: TrainingData[] = [\n  // Greetings\n  { input: \"hello\", output: \"hey!\" },\n  { input: \"hi\", output: \"yo!\" },\n  { input: \"hey\", output: \"sup!\" },\n  { input: \"good morning\", output: \"morning!\" },\n  { input: \"good afternoon\", output: \"afternoon!\" },\n  { input: \"good evening\", output: \"evening!\" },\n  \n  // How are you\n  { input: \"how are you\", output: \"doing good, you?\" },\n  { input: \"whats up\", output: \"just chilling\" },\n  { input: \"how's it going\", output: \"pretty good!\" },\n  \n  // Thanks\n  { input: \"thank you\", output: \"no prob!\" },\n  { input: \"thanks\", output: \"np!\" },\n  { input: \"appreciate it\", output: \"anytime!\" },\n  \n  // Goodbyes\n  { input: \"bye\", output: \"later!\" },\n  { input: \"goodbye\", output: \"see ya!\" },\n  { input: \"see you later\", output: \"catch ya later!\" },\n  \n  // Questions about bot\n  { input: \"what are you\", output: \"just a chill bot\" },\n  { input: \"who are you\", output: \"your friendly ai\" },\n  { input: \"what can you do\", output: \"chat and help out\" },\n  \n  // Help requests\n  { input: \"help\", output: \"what do you need?\" },\n  { input: \"can you help\", output: \"sure thing!\" },\n  { input: \"i need help\", output: \"i got you\" },\n  \n  // Casual questions\n  { input: \"whats your name\", output: \"call me AI\" },\n  { input: \"are you real\", output: \"real enough!\" },\n  { input: \"are you human\", output: \"nah, just ai\" },\n  \n  // Default responses for unknown inputs\n  { input: \"default\", output: \"hmm, not sure about that\" },\n  { input: \"confused\", output: \"could you rephrase?\" },\n  { input: \"unclear\", output: \"what do you mean?\" },\n];\n\n// Simple keyword matching for casual responses\nexport const keywordResponses = {\n  weather: [\"nice day huh?\", \"weather's cool\", \"loving this weather\"],\n  food: [\"food sounds good!\", \"hungry now lol\", \"yum!\"],\n  music: [\"good taste!\", \"love that song\", \"music is life\"],\n  work: [\"work's tough\", \"hang in there\", \"you got this\"],\n  school: [\"school vibes\", \"learning's cool\", \"study hard!\"],\n  tired: [\"same here\", \"get some rest\", \"sleep well!\"],\n  happy: [\"awesome!\", \"that's great!\", \"love to hear it!\"],\n  sad: [\"aw that sucks\", \"hope it gets better\", \"here for you\"],\n  funny: [\"lol\", \"haha nice\", \"that's hilarious\"],\n  game: [\"games are fun\", \"what you playing?\", \"love gaming\"],\n};\n\nexport function trainModel(data: TrainingData[]): ChatbotModel {\n  const model: ChatbotModel = {\n    responses: new Map(),\n    keywords: new Map(),\n  };\n\n  // Train on input-output pairs\n  data.forEach(item => {\n    const key = item.input.toLowerCase().trim();\n    if (!model.responses.has(key)) {\n      model.responses.set(key, []);\n    }\n    model.responses.get(key)!.push(item.output);\n  });\n\n  // Add keyword responses\n  Object.entries(keywordResponses).forEach(([keyword, responses]) => {\n    model.keywords.set(keyword, responses);\n  });\n\n  return model;\n}\n\nexport function getResponse(model: ChatbotModel, input: string): string {\n  const cleanInput = input.toLowerCase().trim();\n  \n  // Check for exact matches first\n  if (model.responses.has(cleanInput)) {\n    const responses = model.responses.get(cleanInput)!;\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  // Check for keyword matches\n  for (const [keyword, responses] of model.keywords.entries()) {\n    if (cleanInput.includes(keyword)) {\n      return responses[Math.floor(Math.random() * responses.length)];\n    }\n  }\n\n  // Check for partial matches\n  for (const [key, responses] of model.responses.entries()) {\n    if (cleanInput.includes(key) || key.includes(cleanInput)) {\n      return responses[Math.floor(Math.random() * responses.length)];\n    }\n  }\n\n  // Default responses\n  const defaultResponses = [\n    \"not sure what you mean\",\n    \"could you say that differently?\",\n    \"hmm, tell me more\",\n    \"interesting...\",\n    \"what else?\",\n    \"go on...\",\n  ];\n\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n}\n\nexport function addTrainingData(model: ChatbotModel, input: string, output: string) {\n  const key = input.toLowerCase().trim();\n  if (!model.responses.has(key)) {\n    model.responses.set(key, []);\n  }\n  model.responses.get(key)!.push(output);\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/tokenizer.ts"],"sourcesContent":["// Types and interfaces\ninterface Token {\n  id: number;\n  text: string;\n  type: 'word' | 'punctuation' | 'special' | 'number';\n}\n\ninterface Message {\n  id: string;\n  text: string;\n  tokens: Token[];\n  timestamp: Date;\n  sender: 'user' | 'bot';\n}\n\ninterface TokenizerConfig {\n  maxVocabSize: number;\n  specialTokens: string[];\n  caseSensitive: boolean;\n}\n\n// Tokenizer class\nclass Tokenizer {\n  private vocabulary: Map<string, number> = new Map();\n  private reverseVocab: Map<number, string> = new Map();\n  private tokenId: number = 0;\n  private config: TokenizerConfig;\n\n  constructor(config: Partial<TokenizerConfig> = {}) {\n    this.config = {\n      maxVocabSize: 10000,\n      specialTokens: ['<pad>', '<unk>', '<bos>', '<eos>', '<user>', '<bot>'],\n      caseSensitive: false,\n      ...config\n    };\n    \n    // Initialize with special tokens\n    this.initializeSpecialTokens();\n  }\n\n  private initializeSpecialTokens(): void {\n    this.config.specialTokens.forEach(token => {\n      this.addToken(token, 'special');\n    });\n  }\n\n  addToken(text: string, type: Token['type'] = 'word'): number {\n    const normalizedText = this.config.caseSensitive ? text : text.toLowerCase();\n    \n    if (this.vocabulary.has(normalizedText)) {\n      return this.vocabulary.get(normalizedText)!;\n    }\n\n    if (this.vocabulary.size >= this.config.maxVocabSize) {\n      return this.vocabulary.get('<unk>')!;\n    }\n\n    const id = this.tokenId++;\n    this.vocabulary.set(normalizedText, id);\n    this.reverseVocab.set(id, normalizedText);\n    return id;\n  }\n\n  tokenize(text: string): Token[] {\n    const tokens: Token[] = [];\n    \n    // Simple tokenization - split on whitespace and punctuation\n    const words = text.match(/\\w+|[^\\w\\s]/g) || [];\n    \n    words.forEach(word => {\n      const normalizedWord = this.config.caseSensitive ? word : word.toLowerCase();\n      let tokenId = this.vocabulary.get(normalizedWord);\n      \n      if (tokenId === undefined) {\n        // Add new token if within vocab limit\n        const type = this.getTokenType(word);\n        tokenId = this.addToken(normalizedWord, type);\n      }\n      \n      tokens.push({\n        id: tokenId,\n        text: word,\n        type: this.getTokenType(word)\n      });\n    });\n    \n    return tokens;\n  }\n\n  private getTokenType(text: string): Token['type'] {\n    if (this.config.specialTokens.includes(text)) return 'special';\n    if (/^\\d+$/.test(text)) return 'number';\n    if (/^[^\\w\\s]$/.test(text)) return 'punctuation';\n    return 'word';\n  }\n\n  detokenize(tokens: Token[]): string {\n    return tokens.map(token => token.text).join(' ');\n  }\n\n  getVocabSize(): number {\n    return this.vocabulary.size;\n  }\n\n  getTokenById(id: number): string | undefined {\n    return this.reverseVocab.get(id);\n  }\n}\n\n// Simple AI Response Generator\nclass AIResponseGenerator {\n  private responses: Map<string, string[]> = new Map([\n    ['greeting', ['Hello! How can I help you today?', 'Hi there! What can I do for you?', 'Greetings! How may I assist you?']],\n    ['question', ['That\\'s an interesting question!', 'Let me think about that...', 'I\\'d be happy to help with that.']],\n    ['default', ['I understand.', 'That\\'s interesting.', 'Tell me more about that.', 'I see what you mean.']],\n    ['goodbye', ['Goodbye! Have a great day!', 'See you later!', 'Until next time!']]\n  ]);\n\n  generateResponse(userMessage: string, tokens: Token[]): string {\n    const lowerMessage = userMessage.toLowerCase();\n    \n    // Simple rule-based responses\n    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('hey')) {\n      return this.getRandomResponse('greeting');\n    }\n    \n    if (lowerMessage.includes('?')) {\n      return this.getRandomResponse('question');\n    }\n    \n    if (lowerMessage.includes('bye') || lowerMessage.includes('goodbye')) {\n      return this.getRandomResponse('goodbye');\n    }\n    \n    // Echo back with token info\n    const tokenCount = tokens.length;\n    const uniqueTokens = new Set(tokens.map(t => t.text.toLowerCase())).size;\n    \n    return `${this.getRandomResponse('default')} Your message had ${tokenCount} tokens (${uniqueTokens} unique). Some interesting tokens I found: ${tokens.slice(0, 3).map(t => `\"${t.text}\"`).join(', ')}.`;\n  }\n\n  private getRandomResponse(category: string): string {\n    const responses = this.responses.get(category) || this.responses.get('default')!;\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n}\n\n// Main Chatbot class\nclass AIChatbot {\n  private tokenizer: Tokenizer;\n  private responseGenerator: AIResponseGenerator;\n  private messages: Message[] = [];\n  private messageIdCounter: number = 0;\n\n  constructor(tokenizerConfig?: Partial<TokenizerConfig>) {\n    this.tokenizer = new Tokenizer(tokenizerConfig);\n    this.responseGenerator = new AIResponseGenerator();\n    \n    // Pre-populate with common words\n    this.initializeCommonVocabulary();\n  }\n\n  private initializeCommonVocabulary(): void {\n    const commonWords = [\n      'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with',\n      'by', 'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does',\n      'did', 'will', 'would', 'could', 'should', 'can', 'may', 'might', 'must', 'shall',\n      'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they',\n      'me', 'him', 'her', 'us', 'them', 'my', 'your', 'his', 'her', 'its', 'our', 'their',\n      'what', 'when', 'where', 'why', 'how', 'who', 'which', 'hello', 'hi', 'bye', 'goodbye',\n      'please', 'thank', 'thanks', 'yes', 'no', 'ok', 'okay'\n    ];\n    \n    commonWords.forEach(word => this.tokenizer.addToken(word, 'word'));\n  }\n\n  async processMessage(userInput: string): Promise<Message> {\n    // Tokenize user input\n    const userTokens = this.tokenizer.tokenize(userInput);\n    \n    // Create user message\n    const userMessage: Message = {\n      id: `msg_${this.messageIdCounter++}`,\n      text: userInput,\n      tokens: userTokens,\n      timestamp: new Date(),\n      sender: 'user'\n    };\n    \n    this.messages.push(userMessage);\n    \n    // Generate bot response\n    const botResponseText = this.responseGenerator.generateResponse(userInput, userTokens);\n    const botTokens = this.tokenizer.tokenize(botResponseText);\n    \n    const botMessage: Message = {\n      id: `msg_${this.messageIdCounter++}`,\n      text: botResponseText,\n      tokens: botTokens,\n      timestamp: new Date(),\n      sender: 'bot'\n    };\n    \n    this.messages.push(botMessage);\n    \n    return botMessage;\n  }\n\n  getMessages(): Message[] {\n    return [...this.messages];\n  }\n\n  getVocabularyStats(): {\n    size: number;\n    maxSize: number;\n    specialTokens: number;\n    wordTokens: number;\n    punctuationTokens: number;\n    numberTokens: number;\n  } {\n    const allTokens = this.messages.flatMap(msg => msg.tokens);\n    const tokenTypes = allTokens.reduce((acc, token) => {\n      acc[token.type] = (acc[token.type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      size: this.tokenizer.getVocabSize(),\n      maxSize: 10000, // From config\n      specialTokens: tokenTypes.special || 0,\n      wordTokens: tokenTypes.word || 0,\n      punctuationTokens: tokenTypes.punctuation || 0,\n      numberTokens: tokenTypes.number || 0\n    };\n  }\n\n  exportConversation(): string {\n    return JSON.stringify(this.messages, null, 2);\n  }\n\n  clearConversation(): void {\n    this.messages = [];\n    this.messageIdCounter = 0;\n  }\n}\n\n// Usage example\nasync function runChatbot(): Promise<AIChatbot> {\n  const chatbot = new AIChatbot({\n    maxVocabSize: 5000,\n    caseSensitive: false\n  });\n\n  console.log('AI Chatbot initialized!');\n  console.log('Vocabulary size:', chatbot.getVocabularyStats().size);\n  \n  // Simulate conversation\n  const testMessages = [\n    \"Hello there!\",\n    \"How are you doing today?\",\n    \"Can you help me with programming?\",\n    \"What's 2 + 2?\",\n    \"Thanks for your help. Goodbye!\"\n  ];\n\n  for (const message of testMessages) {\n    console.log(`\\nUser: ${message}`);\n    const response = await chatbot.processMessage(message);\n    console.log(`Bot: ${response.text}`);\n    console.log(`Tokens: [${response.tokens.map(t => `${t.text}(${t.type})`).join(', ')}]`);\n  }\n\n  console.log('\\n--- Conversation Stats ---');\n  const stats = chatbot.getVocabularyStats();\n  console.log(`Total vocabulary: ${stats.size}/${stats.maxSize}`);\n  console.log(`Word tokens: ${stats.wordTokens}`);\n  console.log(`Special tokens: ${stats.specialTokens}`);\n  console.log(`Punctuation tokens: ${stats.punctuationTokens}`);\n  console.log(`Number tokens: ${stats.numberTokens}`);\n\n  return chatbot;\n}\n\n// Export for use in other modules\nexport { AIChatbot, Tokenizer, AIResponseGenerator };\nexport type { Token, Message, TokenizerConfig };\n\n// For Node.js execution - only run if in Node.js environment\nif (typeof process !== 'undefined' && process.argv && process.argv[1] && process.argv[1].includes(__filename)) {\n  runChatbot().catch(console.error);\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 809, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/app/chat/route.ts"],"sourcesContent":["// src/app/chat/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { ChatBot } from '../../lib/chatbot';\nimport { processTrainingData } from '../../lib/training';\nimport { tokenize } from '../../lib/tokenizer';\n\ninterface ChatRequest {\n  message: string;\n  useLocalModel?: boolean;\n}\n\ninterface ChatResponse {\n  reply: string;\n  timestamp: string;\n  source: 'openai' | 'huggingface' | 'local' | 'fallback';\n}\n\n// Initialize your local chatbot\nlet localChatBot: ChatBot | null = null;\n\nasync function initializeLocalChatBot() {\n  if (!localChatBot) {\n    try {\n      localChatBot = new ChatBot();\n      // Load and process your training data\n      await processTrainingData();\n      console.log('Local chatbot initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize local chatbot:', error);\n      localChatBot = null;\n    }\n  }\n  return localChatBot;\n}\n\n// Option 1: Using OpenAI API (requires API key)\nasync function getOpenAIResponse(message: string): Promise<string> {\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a casual, nonchalant AI assistant. Keep responses short and chill. Use lowercase and casual language.'\n          },\n          {\n            role: 'user',\n            content: message\n          }\n        ],\n        max_tokens: 150,\n        temperature: 0.7,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0]?.message?.content || \"couldn't process that rn\";\n  } catch (error) {\n    console.error('OpenAI API error:', error);\n    throw error;\n  }\n}\n\n// Option 2: Using Hugging Face API (free tier available)\nasync function getHuggingFaceResponse(message: string): Promise<string> {\n  try {\n    const response = await fetch(\n      'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium',\n      {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          inputs: message,\n          parameters: {\n            max_length: 100,\n            temperature: 0.8,\n          }\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Hugging Face API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.generated_text || \"hmm not sure about that\";\n  } catch (error) {\n    console.error('Hugging Face API error:', error);\n    throw error;\n  }\n}\n\n// Option 3: Using your local chatbot\nasync function getLocalResponse(message: string): Promise<string> {\n  try {\n    const chatbot = await initializeLocalChatBot();\n    if (!chatbot) {\n      throw new Error('Local chatbot not available');\n    }\n\n    // Tokenize the input message\n    const tokens = tokenize(message);\n    \n    // Generate response using your local model\n    const response = await chatbot.generateResponse(message);\n    \n    return response || \"my brain is still learning, try again\";\n  } catch (error) {\n    console.error('Local chatbot error:', error);\n    throw error;\n  }\n}\n\n// Option 4: Enhanced pattern matching with more comprehensive responses\nfunction getSmartResponse(message: string): string {\n  const msg = message.toLowerCase();\n  \n  // Math questions\n  if (msg.includes('what is') && (msg.includes('+') || msg.includes('-') || msg.includes('*') || msg.includes('/'))) {\n    try {\n      const mathExpression = msg.match(/[\\d\\+\\-\\*\\/\\.\\s]+/)?.[0];\n      if (mathExpression) {\n        // Safe math evaluation\n        const sanitized = mathExpression.replace(/[^0-9+\\-*/().]/g, '');\n        const result = Function('\"use strict\"; return (' + sanitized + ')')();\n        return `that's ${result}`;\n      }\n    } catch {\n      return \"math isn't my strong suit\";\n    }\n  }\n  \n  // Science questions\n  if (msg.includes('what is') || msg.includes('explain') || msg.includes('how does')) {\n    const scienceTopics = {\n      'gravity': \"gravity pulls stuff down, pretty simple\",\n      'photosynthesis': \"plants eat sunlight basically\",\n      'dna': \"genetic code that makes you... you\",\n      'evolution': \"things change over time to survive better\",\n      'quantum': \"tiny particles doing weird stuff\",\n      'atoms': \"super small building blocks of everything\",\n      'solar system': \"sun and planets doing their orbit thing\",\n      'black hole': \"space vacuum that sucks everything in\",\n    };\n    \n    for (const [topic, explanation] of Object.entries(scienceTopics)) {\n      if (msg.includes(topic)) {\n        return explanation;\n      }\n    }\n  }\n  \n  // Programming questions\n  if (msg.includes('code') || msg.includes('programming') || msg.includes('javascript') || msg.includes('python')) {\n    return \"coding is cool, what specifically do you need help with?\";\n  }\n  \n  // General knowledge\n  if (msg.includes('who is') || msg.includes('who was')) {\n    return \"probably someone famous, idk google it\";\n  }\n  \n  if (msg.includes('when') || msg.includes('what year')) {\n    return \"sometime in the past probably\";\n  }\n  \n  if (msg.includes('where is') || msg.includes('where was')) {\n    return \"somewhere on earth i'd guess\";\n  }\n  \n  if (msg.includes('why') || msg.includes('how come')) {\n    return \"that's just how things work sometimes\";\n  }\n  \n  // Advice/opinion questions\n  if (msg.includes('should i') || msg.includes('what do you think')) {\n    const advice = [\n      \"eh, do whatever feels right\",\n      \"you probably know better than me\",\n      \"follow your gut i guess\",\n      \"could go either way tbh\",\n      \"up to you really\"\n    ];\n    return advice[Math.floor(Math.random() * advice.length)];\n  }\n  \n  // Default responses\n  const defaultResponses = [\n    \"interesting question, not sure though\",\n    \"that's above my pay grade\",\n    \"good question, wish i knew\",\n    \"hmm, that's a tough one\",\n    \"you got me there\",\n    \"not really my area of expertise\",\n    \"probably google knows better than me\"\n  ];\n  \n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: ChatRequest = await request.json();\n    \n    if (!body.message || typeof body.message !== 'string') {\n      return NextResponse.json(\n        { error: 'Message is required and must be a string' },\n        { status: 400 }\n      );\n    }\n\n    // Add realistic delay\n    await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 700));\n\n    let reply: string;\n    let source: ChatResponse['source'] = 'fallback';\n\n    try {\n      // Priority order for getting responses\n      if (body.useLocalModel) {\n        // Force use of local model if requested\n        reply = await getLocalResponse(body.message);\n        source = 'local';\n      } else if (process.env.OPENAI_API_KEY) {\n        reply = await getOpenAIResponse(body.message);\n        source = 'openai';\n      } else if (process.env.HUGGINGFACE_API_KEY) {\n        reply = await getHuggingFaceResponse(body.message);\n        source = 'huggingface';\n      } else {\n        // Try local model as fallback before pattern matching\n        try {\n          reply = await getLocalResponse(body.message);\n          source = 'local';\n        } catch (localError) {\n          console.log('Local model failed, using pattern matching');\n          reply = getSmartResponse(body.message);\n          source = 'fallback';\n        }\n      }\n    } catch (error) {\n      console.error('Primary response method failed:', error);\n      // Fallback to pattern matching\n      reply = getSmartResponse(body.message);\n      source = 'fallback';\n    }\n\n    const response: ChatResponse = {\n      reply,\n      timestamp: new Date().toISOString(),\n      source\n    };\n\n    return NextResponse.json(response);\n    \n  } catch (error) {\n    console.error('Chat API error:', error);\n    return NextResponse.json(\n      { error: 'something went wrong, my bad' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json(\n    { \n      message: 'ai is ready to answer stuff',\n      availableSources: {\n        openai: !!process.env.OPENAI_API_KEY,\n        huggingface: !!process.env.HUGGINGFACE_API_KEY,\n        local: true,\n        fallback: true\n      }\n    },\n    { status: 200 }\n  );\n}"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AACxB;AACA;AACA;AACA;;;;;AAaA,gCAAgC;AAChC,IAAI,eAA+B;AAEnC,eAAe;IACb,IAAI,CAAC,cAAc;QACjB,IAAI;YACF,eAAe,IAAI,uHAAA,CAAA,UAAO;YAC1B,sCAAsC;YACtC,MAAM,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD;YACxB,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uCAAuC;YACrD,eAAe;QACjB;IACF;IACA,OAAO;AACT;AAEA,gDAAgD;AAChD,eAAe,kBAAkB,OAAe;IAC9C,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,8CAA8C;YACzE,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,cAAc,EAAE;gBACvD,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,UAAU;oBACR;wBACE,MAAM;wBACN,SAAS;oBACX;oBACA;wBACE,MAAM;wBACN,SAAS;oBACX;iBACD;gBACD,YAAY;gBACZ,aAAa;YACf;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,MAAM,EAAE;QACxD;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,OAAO,CAAC,EAAE,EAAE,SAAS,WAAW;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM;IACR;AACF;AAEA,yDAAyD;AACzD,eAAe,uBAAuB,OAAe;IACnD,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,yEACA;YACE,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,mBAAmB,EAAE;gBAC5D,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,QAAQ;gBACR,YAAY;oBACV,YAAY;oBACZ,aAAa;gBACf;YACF;QACF;QAGF,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,SAAS,MAAM,EAAE;QAC9D;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,cAAc,IAAI;IAChC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM;IACR;AACF;AAEA,qCAAqC;AACrC,eAAe,iBAAiB,OAAe;IAC7C,IAAI;QACF,MAAM,UAAU,MAAM;QACtB,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,MAAM;QAClB;QAEA,6BAA6B;QAC7B,MAAM,SAAS,CAAA,GAAA,yHAAA,CAAA,WAAQ,AAAD,EAAE;QAExB,2CAA2C;QAC3C,MAAM,WAAW,MAAM,QAAQ,gBAAgB,CAAC;QAEhD,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM;IACR;AACF;AAEA,wEAAwE;AACxE,SAAS,iBAAiB,OAAe;IACvC,MAAM,MAAM,QAAQ,WAAW;IAE/B,iBAAiB;IACjB,IAAI,IAAI,QAAQ,CAAC,cAAc,CAAC,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,GAAG;QACjH,IAAI;YACF,MAAM,iBAAiB,IAAI,KAAK,CAAC,sBAAsB,CAAC,EAAE;YAC1D,IAAI,gBAAgB;gBAClB,uBAAuB;gBACvB,MAAM,YAAY,eAAe,OAAO,CAAC,mBAAmB;gBAC5D,MAAM,SAAS,SAAS,2BAA2B,YAAY;gBAC/D,OAAO,CAAC,OAAO,EAAE,QAAQ;YAC3B;QACF,EAAE,OAAM;YACN,OAAO;QACT;IACF;IAEA,oBAAoB;IACpB,IAAI,IAAI,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,aAAa;QAClF,MAAM,gBAAgB;YACpB,WAAW;YACX,kBAAkB;YAClB,OAAO;YACP,aAAa;YACb,WAAW;YACX,SAAS;YACT,gBAAgB;YAChB,cAAc;QAChB;QAEA,KAAK,MAAM,CAAC,OAAO,YAAY,IAAI,OAAO,OAAO,CAAC,eAAgB;YAChE,IAAI,IAAI,QAAQ,CAAC,QAAQ;gBACvB,OAAO;YACT;QACF;IACF;IAEA,wBAAwB;IACxB,IAAI,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,kBAAkB,IAAI,QAAQ,CAAC,iBAAiB,IAAI,QAAQ,CAAC,WAAW;QAC/G,OAAO;IACT;IAEA,oBAAoB;IACpB,IAAI,IAAI,QAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,YAAY;QACrD,OAAO;IACT;IAEA,IAAI,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,cAAc;QACrD,OAAO;IACT;IAEA,IAAI,IAAI,QAAQ,CAAC,eAAe,IAAI,QAAQ,CAAC,cAAc;QACzD,OAAO;IACT;IAEA,IAAI,IAAI,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,aAAa;QACnD,OAAO;IACT;IAEA,2BAA2B;IAC3B,IAAI,IAAI,QAAQ,CAAC,eAAe,IAAI,QAAQ,CAAC,sBAAsB;QACjE,MAAM,SAAS;YACb;YACA;YACA;YACA;YACA;SACD;QACD,OAAO,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,MAAM,EAAE;IAC1D;IAEA,oBAAoB;IACpB,MAAM,mBAAmB;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,OAAO,gBAAgB,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,iBAAiB,MAAM,EAAE;AAC9E;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAoB,MAAM,QAAQ,IAAI;QAE5C,IAAI,CAAC,KAAK,OAAO,IAAI,OAAO,KAAK,OAAO,KAAK,UAAU;YACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2C,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,MAAM,KAAK,MAAM,KAAK;QAEvE,IAAI;QACJ,IAAI,SAAiC;QAErC,IAAI;YACF,uCAAuC;YACvC,IAAI,KAAK,aAAa,EAAE;gBACtB,wCAAwC;gBACxC,QAAQ,MAAM,iBAAiB,KAAK,OAAO;gBAC3C,SAAS;YACX,OAAO,IAAI,QAAQ,GAAG,CAAC,cAAc,EAAE;gBACrC,QAAQ,MAAM,kBAAkB,KAAK,OAAO;gBAC5C,SAAS;YACX,OAAO,IAAI,QAAQ,GAAG,CAAC,mBAAmB,EAAE;gBAC1C,QAAQ,MAAM,uBAAuB,KAAK,OAAO;gBACjD,SAAS;YACX,OAAO;gBACL,sDAAsD;gBACtD,IAAI;oBACF,QAAQ,MAAM,iBAAiB,KAAK,OAAO;oBAC3C,SAAS;gBACX,EAAE,OAAO,YAAY;oBACnB,QAAQ,GAAG,CAAC;oBACZ,QAAQ,iBAAiB,KAAK,OAAO;oBACrC,SAAS;gBACX;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,+BAA+B;YAC/B,QAAQ,iBAAiB,KAAK,OAAO;YACrC,SAAS;QACX;QAEA,MAAM,WAAyB;YAC7B;YACA,WAAW,IAAI,OAAO,WAAW;YACjC;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;QACE,SAAS;QACT,kBAAkB;YAChB,QAAQ,CAAC,CAAC,QAAQ,GAAG,CAAC,cAAc;YACpC,aAAa,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;YAC9C,OAAO;YACP,UAAU;QACZ;IACF,GACA;QAAE,QAAQ;IAAI;AAElB","debugId":null}}]
}