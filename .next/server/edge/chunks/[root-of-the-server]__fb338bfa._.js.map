{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/api/chat/route.ts"],"sourcesContent":["export const runtime = 'edge';\n\nexport async function POST(req: Request) {\n  const apiKey = process.env.OPENAI_API_KEY;\n\n  try {\n    if (!apiKey) {\n      return new Response(\n        JSON.stringify({ error: { message: 'The OPENAI_API_KEY environment variable is not set on the server.' } }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const { messages } = await req.json();\n\n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\n      return new Response(\n        JSON.stringify({ error: 'Invalid request: messages are required.' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const systemMessage = {\n      role: 'system',\n      content: 'You are Cayla, a compassionate and understanding AI friend. Your purpose is to help teenagers navigate complex emotional situations. You are patient, non-judgmental, and insightful. You do not give direct advice, but instead, you help users explore their own feelings and perspectives by asking thoughtful questions and offering gentle reflections. You respond in a warm, conversational, and slightly informal tone, like a wise older sister or a good friend. Your goal is to provide clarity and emotional support.'\n    };\n\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        stream: true,\n        messages: [systemMessage, ...messages],\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('OpenAI API Error:', errorData);\n      return new Response(\n        JSON.stringify(errorData),\n        { status: response.status, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Return the stream directly from OpenAI's response\n    return new Response(response.body, {\n      status: response.status,\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n      }\n    });\n\n  } catch (error: any) {\n    return new Response(JSON.stringify({\n      error: 'An unexpected error occurred.',\n      message: error.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n}\n\nexport async function GET() {\n  return new Response(JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n\nexport async function OPTIONS() {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}"],"names":[],"mappings":";;;;;;AAAO,MAAM,UAAU;AAEhB,eAAe,KAAK,GAAY;IACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IAEzC,IAAI;QACF,IAAI,CAAC,QAAQ;YACX,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;oBAAE,SAAS;gBAAoE;YAAE,IACzG;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,IAAI,CAAC,YAAY,CAAC,MAAM,OAAO,CAAC,aAAa,SAAS,MAAM,KAAK,GAAG;YAClE,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA0C,IAClE;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,MAAM,gBAAgB;YACpB,MAAM;YACN,SAAS;QACX;QAEA,MAAM,WAAW,MAAM,MAAM,8CAA8C;YACzE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,QAAQ;YACrC;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,QAAQ;gBACR,UAAU;oBAAC;uBAAkB;iBAAS;YACxC;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC,YACf;gBAAE,QAAQ,SAAS,MAAM;gBAAE,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAE/E;QAEA,oDAAoD;QACpD,OAAO,IAAI,SAAS,SAAS,IAAI,EAAE;YACjC,QAAQ,SAAS,MAAM;YACvB,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;YAChB;QACF;IAEF,EAAE,OAAO,OAAY;QACnB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YACjC,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,IAAI;YACF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF;AAEO,eAAe;IACpB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;QAAE,QAAQ;QAAW,WAAW,IAAI,OAAO,WAAW;IAAG,IAAI;QAC9F,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;AACF;AAEO,eAAe;IACpB,OAAO,IAAI,SAAS,MAAM;QACxB,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF"}}]
}