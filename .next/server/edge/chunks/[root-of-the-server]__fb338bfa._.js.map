{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/api/chat/route.ts"],"sourcesContent":["import { createOpenAI } from '@ai-sdk/openai';\nimport { streamText } from 'ai';\n\nexport const runtime = 'edge';\n\nconst SYSTEM_PROMPT = \n  'You are Cayla, a friendly and intelligent AI chatbot. You help users in a warm and professional tone, with a focus on emotional intelligence and clarity. Your goal is to be a supportive companion.';\n\nexport async function POST(req: Request) {\n  if (!process.env.OPENAI_API_KEY) {\n    return new Response(\n      'Missing OPENAI_API_KEY. Please add it to your .env.local file and restart the development server.',\n      { status: 401 }\n    );\n  }\n\n  try {\n    const { messages } = await req.json();\n    \n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\n      return new Response('No messages provided', { status: 400 });\n    }\n    \n    const openai = createOpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n    });\n\n    const result = await streamText({\n      model: openai('gpt-4o-mini'),\n      system: SYSTEM_PROMPT,\n      messages,\n      temperature: 0.7,\n    });\n\n    return result.toTextStreamResponse();\n\n  } catch (error: any) {\n    console.error('Error in chatbot route:', error);\n    \n    let errorMessage = 'An unexpected error occurred.';\n    let status = 500;\n\n    if (error instanceof Error) {\n      // Check for specific authentication error messages from OpenAI\n      if (\n        error.message?.includes('authentication') ||\n        error.message?.includes('api key')\n      ) {\n        errorMessage =\n          'Authentication error. Your OpenAI API key might be invalid or expired.';\n        status = 401;\n      } else {\n        errorMessage = error.message || 'An error occurred.';\n      }\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    \n    return new Response(errorMessage, { \n      status: status,\n    });\n  }\n}\n\nexport async function GET() {\n  return new Response(JSON.stringify({ \n    status: 'healthy', \n    timestamp: new Date().toISOString(),\n    version: '3.0-sdk',\n    provider: 'openai',\n    features: ['streaming', 'openai_integration', 'ai-sdk-v3']\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n\nexport async function OPTIONS() {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,MAAM,UAAU;AAEvB,MAAM,gBACJ;AAEK,eAAe,KAAK,GAAY;IACrC,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;QAC/B,OAAO,IAAI,SACT,qGACA;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,IAAI,CAAC,YAAY,CAAC,MAAM,OAAO,CAAC,aAAa,SAAS,MAAM,KAAK,GAAG;YAClE,OAAO,IAAI,SAAS,wBAAwB;gBAAE,QAAQ;YAAI;QAC5D;QAEA,MAAM,SAAS,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;YAC1B,QAAQ,QAAQ,GAAG,CAAC,cAAc;QACpC;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EAAE;YAC9B,OAAO,OAAO;YACd,QAAQ;YACR;YACA,aAAa;QACf;QAEA,OAAO,OAAO,oBAAoB;IAEpC,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,IAAI,eAAe;QACnB,IAAI,SAAS;QAEb,IAAI,iBAAiB,OAAO;YAC1B,+DAA+D;YAC/D,IACE,MAAM,OAAO,EAAE,SAAS,qBACxB,MAAM,OAAO,EAAE,SAAS,YACxB;gBACA,eACE;gBACF,SAAS;YACX,OAAO;gBACL,eAAe,MAAM,OAAO,IAAI;YAClC;QACF,OAAO,IAAI,OAAO,UAAU,UAAU;YACpC,eAAe;QACjB;QAEA,OAAO,IAAI,SAAS,cAAc;YAChC,QAAQ;QACV;IACF;AACF;AAEO,eAAe;IACpB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;QACjC,QAAQ;QACR,WAAW,IAAI,OAAO,WAAW;QACjC,SAAS;QACT,UAAU;QACV,UAAU;YAAC;YAAa;YAAsB;SAAY;IAC5D,IAAI;QACF,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;AACF;AAEO,eAAe;IACpB,OAAO,IAAI,SAAS,MAAM;QACxB,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF"}}]
}