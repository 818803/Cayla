{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/lib/sentiment-analysis.ts"],"sourcesContent":["'use client';\n\nimport { pipeline, Pipeline, TextClassificationPipeline } from '@huggingface/transformers';\nimport { Emotion } from './types';\n\n// Define a mapping from model labels to our custom emotions\nconst emotionLabelMap: Record<string, Emotion> = {\n  joy: 'Joy',\n  sadness: 'Sadness',\n  anger: 'Anger',\n  fear: 'Fear',\n  surprise: 'Surprise',\n  disgust: 'Disgust',\n  love: 'Love',\n};\n\nexport async function detectEmotion(text: string): Promise<Emotion> {\n    if (!text || text.trim().length === 0) {\n        return 'Normal';\n    }\n    // Temporarily disabled for debugging.\n    return 'Normal';\n}\n\nexport const avatarMap: Record<Emotion, string> = {\n    'Joy': '/assets/images/avataaars.png',\n    'Sadness': '/assets/images/avataaars copy.png',\n    'Anger': '/assets/images/avataaars copy 2.png',\n    'Fear': '/assets/images/avataaars copy 3.png',\n    'Surprise': '/assets/images/avataaars copy 4.png',\n    'Disgust': '/assets/images/avataaars copy 5.png',\n    'Love': '/assets/images/avataaars copy 6.png',\n    'Normal': '/assets/images/avataaars.png',\n    'Analytical': '/assets/images/avataaars.png',\n    'Happy': '/assets/images/avataaars.png',\n    'Sad': '/assets/images/avataaars copy.png',\n    'Annoyed': '/assets/images/avataaars copy 2.png',\n    'Goofy': '/assets/images/avataaars copy 4.png',\n    'Barf': '/assets/images/avataaars copy 5.png',\n    'Concern': '/assets/images/avataaars copy 3.png',\n    'Curiosity': '/assets/images/avataaars.png',\n    'Gratitude': '/assets/images/avataaars copy 6.png',\n    'Excitement': '/assets/images/avataaars.png',\n    'Contentment': '/assets/images/avataaars.png',\n    'Warmth': '/assets/images/avataaars copy 6.png',\n    'Understanding': '/assets/images/avataaars.png',\n    'Empathy': '/assets/images/avataaars copy 6.png',\n}; "],"names":[],"mappings":";;;;AAAA;AAKA,4DAA4D;AAC5D,MAAM,kBAA2C;IAC/C,KAAK;IACL,SAAS;IACT,OAAO;IACP,MAAM;IACN,UAAU;IACV,SAAS;IACT,MAAM;AACR;AAEO,eAAe,cAAc,IAAY;IAC5C,IAAI,CAAC,QAAQ,KAAK,IAAI,GAAG,MAAM,KAAK,GAAG;QACnC,OAAO;IACX;IACA,sCAAsC;IACtC,OAAO;AACX;AAEO,MAAM,YAAqC;IAC9C,OAAO;IACP,WAAW;IACX,SAAS;IACT,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,QAAQ;IACR,UAAU;IACV,cAAc;IACd,SAAS;IACT,OAAO;IACP,WAAW;IACX,SAAS;IACT,QAAQ;IACR,WAAW;IACX,aAAa;IACb,aAAa;IACb,cAAc;IACd,eAAe;IACf,UAAU;IACV,iBAAiB;IACjB,WAAW;AACf","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/components/chatinterface.tsx"],"sourcesContent":["'use client';\n\nimport { useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { Send } from 'lucide-react';\nimport ReactMarkdown from 'react-markdown';\nimport { ChatMessage } from '@/lib/types';\nimport { avatarMap } from '@/lib/sentiment-analysis';\n\ninterface ChatInterfaceProps {\n  messages: ChatMessage[];\n  input: string;\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) => void;\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  isLoading: boolean;\n  error?: string | null;\n  className?: string;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({\n  messages,\n  input,\n  handleInputChange,\n  handleSubmit,\n  isLoading,\n  error,\n  className = '',\n}) => {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      const form = event.currentTarget.form;\n      if (form) {\n        const submitEvent = new Event('submit', { bubbles: true, cancelable: true });\n        form.dispatchEvent(submitEvent);\n      }\n    }\n  };\n\n  const currentAvatar = avatarMap['Normal'];\n\n  return (\n    <div className={`flex flex-col h-full max-h-screen bg-white dark:bg-gray-800 rounded-4xl ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center gap-4 px-6 py-4 rounded-t-4xl border-b border-sakura-gray dark:border-gray-700\">\n        <div className=\"w-12 h-12 bg-gradient-to-br from-sakura-pink to-sakura-accent rounded-full flex-shrink-0 relative overflow-hidden ring-4 ring-white dark:ring-gray-800\">\n          <Image\n            src={currentAvatar}\n            alt=\"Cayla Avatar\"\n            fill\n            sizes=\"48px\"\n            style={{ objectFit: 'cover' }}\n            priority\n            key={currentAvatar} // Add key to force re-render on change\n          />\n        </div>\n        <div>\n          <h1 className=\"text-lg font-bold text-sakura-text dark:text-gray-100\">Chat with Cayla</h1>\n          <p className=\"text-sm text-sakura-text/70 dark:text-gray-400\">Your private AI guide for emotional clarity</p>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div ref={scrollRef} className=\"flex-1 overflow-y-auto p-6 space-y-5\">\n        {messages.map((m) => {\n          const avatarSrc = avatarMap['Normal'];\n          return (\n            <div key={m.id} className={`flex items-end gap-3 ${m.sender === 'user' ? 'justify-end' : 'justify-start'}`}>\n              {m.sender === 'bot' && (\n                <div className=\"w-9 h-9 rounded-full bg-gradient-to-br from-sakura-pink to-sakura-accent flex-shrink-0 self-start\">\n                  <Image src={avatarSrc} alt=\"Cayla Avatar\" width={36} height={36} className=\"rounded-full\" />\n                </div>\n              )}\n              <div className={`px-4 py-2.5 rounded-2xl max-w-lg shadow-sm prose dark:prose-invert ${m.sender === 'user' \n                ? 'bg-sakura-accent text-white rounded-br-none' \n                : 'bg-sakura-gray text-sakura-text dark:bg-gray-700 dark:text-gray-200 rounded-bl-none'\n              }`}>\n                <ReactMarkdown>{m.message}</ReactMarkdown>\n              </div>\n            </div>\n          );\n        })}\n        {isLoading && (\n          <div className=\"flex items-end gap-3 justify-start\">\n            <div className=\"w-9 h-9 rounded-full bg-gradient-to-br from-sakura-pink to-sakura-dark-pink flex-shrink-0\">\n               <Image src={currentAvatar} alt=\"Cayla Avatar\" width={36} height={36} className=\"rounded-full\" />\n            </div>\n            <div className=\"p-4 rounded-2xl max-w-md shadow-sm bg-sakura-gray text-sakura-text dark:bg-gray-700 rounded-bl-none\">\n              <div className=\"flex items-center space-x-1.5\">\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-150\"></div>\n                <div className=\"w-2 h-2 bg-sakura-pink rounded-full animate-pulse delay-300\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Input Form */}\n      <div className=\"p-4 border-t border-sakura-gray dark:border-gray-700 bg-white dark:bg-gray-800 rounded-b-4xl\">\n        {error && (\n          <div className=\"mb-2 text-center text-sm text-red-500 bg-red-100 dark:bg-red-900/30 p-2 rounded-lg\">\n            <p><strong>API Error:</strong> {error}</p>\n            <p className=\"text-xs text-red-400 mt-1\">Please check your OPENAI_API_KEY in .env.local and restart the server.</p>\n          </div>\n        )}\n        <form onSubmit={handleSubmit} className=\"flex items-center gap-3\">\n          <textarea\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message, Cayla is listening...\"\n            rows={1}\n            className=\"flex-1 p-3 bg-sakura-gray dark:bg-gray-700 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-sakura-accent transition-all text-sakura-text dark:text-gray-200 placeholder:text-sakura-text/50 dark:placeholder:text-gray-400\"\n          />\n          <button\n            type=\"submit\"\n            disabled={isLoading || !input.trim()}\n            className=\"w-10 h-10 bg-sakura-accent text-white rounded-lg flex items-center justify-center transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:scale-100 disabled:cursor-not-allowed shadow-md hover:shadow-pink-glow\"\n          >\n            <Send size={18} />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAEA;;;AAPA;;;;;;AAmBA,MAAM,gBAA8C,CAAC,EACnD,QAAQ,EACR,KAAK,EACL,iBAAiB,EACjB,YAAY,EACZ,SAAS,EACT,KAAK,EACL,YAAY,EAAE,EACf;;IACC,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAkB;IAEzC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,IAAI,UAAU,OAAO,EAAE;gBACrB,UAAU,OAAO,CAAC,SAAS,GAAG,UAAU,OAAO,CAAC,YAAY;YAC9D;QACF;kCAAG;QAAC;KAAS;IAEb,MAAM,gBAAgB,CAAC;QACrB,IAAI,MAAM,GAAG,KAAK,WAAW,CAAC,MAAM,QAAQ,EAAE;YAC5C,MAAM,cAAc;YACpB,MAAM,OAAO,MAAM,aAAa,CAAC,IAAI;YACrC,IAAI,MAAM;gBACR,MAAM,cAAc,IAAI,MAAM,UAAU;oBAAE,SAAS;oBAAM,YAAY;gBAAK;gBAC1E,KAAK,aAAa,CAAC;YACrB;QACF;IACF;IAEA,MAAM,gBAAgB,sIAAA,CAAA,YAAS,CAAC,SAAS;IAEzC,qBACE,6LAAC;QAAI,WAAW,CAAC,wEAAwE,EAAE,WAAW;;0BAEpG,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;4BACJ,KAAK;4BACL,KAAI;4BACJ,IAAI;4BACJ,OAAM;4BACN,OAAO;gCAAE,WAAW;4BAAQ;4BAC5B,QAAQ;2BACH;;;;;;;;;;kCAGT,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;0CAAwD;;;;;;0CACtE,6LAAC;gCAAE,WAAU;0CAAiD;;;;;;;;;;;;;;;;;;0BAKlE,6LAAC;gBAAI,KAAK;gBAAW,WAAU;;oBAC5B,SAAS,GAAG,CAAC,CAAC;wBACb,MAAM,YAAY,sIAAA,CAAA,YAAS,CAAC,SAAS;wBACrC,qBACE,6LAAC;4BAAe,WAAW,CAAC,qBAAqB,EAAE,EAAE,MAAM,KAAK,SAAS,gBAAgB,iBAAiB;;gCACvG,EAAE,MAAM,KAAK,uBACZ,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;wCAAC,KAAK;wCAAW,KAAI;wCAAe,OAAO;wCAAI,QAAQ;wCAAI,WAAU;;;;;;;;;;;8CAG/E,6LAAC;oCAAI,WAAW,CAAC,mEAAmE,EAAE,EAAE,MAAM,KAAK,SAC/F,gDACA,uFACF;8CACA,cAAA,6LAAC,2LAAA,CAAA,UAAa;kDAAE,EAAE,OAAO;;;;;;;;;;;;2BAVnB,EAAE,EAAE;;;;;oBAclB;oBACC,2BACC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CACZ,cAAA,6LAAC,gIAAA,CAAA,UAAK;oCAAC,KAAK;oCAAe,KAAI;oCAAe,OAAO;oCAAI,QAAQ;oCAAI,WAAU;;;;;;;;;;;0CAElF,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;;;;;sDACf,6LAAC;4CAAI,WAAU;;;;;;sDACf,6LAAC;4CAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQzB,6LAAC;gBAAI,WAAU;;oBACZ,uBACC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;;kDAAE,6LAAC;kDAAO;;;;;;oCAAmB;oCAAE;;;;;;;0CAChC,6LAAC;gCAAE,WAAU;0CAA4B;;;;;;;;;;;;kCAG7C,6LAAC;wBAAK,UAAU;wBAAc,WAAU;;0CACtC,6LAAC;gCACC,OAAO;gCACP,UAAU;gCACV,WAAW;gCACX,aAAY;gCACZ,MAAM;gCACN,WAAU;;;;;;0CAEZ,6LAAC;gCACC,MAAK;gCACL,UAAU,aAAa,CAAC,MAAM,IAAI;gCAClC,WAAU;0CAEV,cAAA,6LAAC,qMAAA,CAAA,OAAI;oCAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMxB;GAnHM;KAAA;uCAqHS","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///Users/plana/Desktop/test/src/app/chat/%5BsessionId%5D/page.tsx"],"sourcesContent":["'use client'\n\nimport { useMemo } from 'react';\nimport { useChat } from 'ai/react';\nimport { useParams } from 'next/navigation';\nimport ChatInterface from '@/components/chatinterface';\nimport { getConversation, saveConversation } from '@/lib/conversation-history';\nimport { ChatMessage as UIChatMessage } from '@/lib/types';\nimport { type Message as CoreMessage } from 'ai/react';\n\nfunction transformToUIMessages(messages: CoreMessage[]): UIChatMessage[] {\n  return messages.map((msg) => ({\n    id: msg.id,\n    message: msg.content,\n    sender: msg.role === 'user' ? 'user' : 'bot',\n    timestamp: msg.createdAt || new Date(),\n  }));\n}\n\nexport default function ChatPage() {\n  const params = useParams();\n  const sessionId = params.sessionId as string;\n\n  // Fetch initial messages directly\n      const conversation = getConversation(sessionId);\n  const initialMessages = conversation ? conversation.messages : [];\n\n  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({\n    api: '/api/chat',\n    id: sessionId,\n    initialMessages: initialMessages,\n    onFinish: (message) => {\n      // Create a snapshot of the messages to save\n      const messagesToSave = [...messages, message];\n      const firstUserMessage = messagesToSave.find(m => m.role === 'user');\n      const title = conversation?.title || (firstUserMessage ? firstUserMessage.content.substring(0, 30) : 'New Chat');\n      saveConversation(sessionId, title, messagesToSave);\n        window.dispatchEvent(new Event('conversationHistoryChanged'));\n    }\n  });\n  \n  const uiMessages = useMemo(() => transformToUIMessages(messages), [messages]);\n\n  return (\n    <div className=\"h-full w-full\">\n      <ChatInterface\n        messages={uiMessages}\n        input={input}\n        handleInputChange={handleInputChange}\n        handleSubmit={handleSubmit}\n        isLoading={isLoading}\n        error={error?.message}\n        className=\"h-full w-full\"\n      />\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AAUA,SAAS,sBAAsB,QAAuB;IACpD,OAAO,SAAS,GAAG,CAAC,CAAC,MAAQ,CAAC;YAC5B,IAAI,IAAI,EAAE;YACV,SAAS,IAAI,OAAO;YACpB,QAAQ,IAAI,IAAI,KAAK,SAAS,SAAS;YACvC,WAAW,IAAI,SAAS,IAAI,IAAI;QAClC,CAAC;AACH;AAEe,SAAS;;IACtB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,YAAY,OAAO,SAAS;IAElC,kCAAkC;IAC9B,MAAM,eAAe,CAAA,GAAA,wIAAA,CAAA,kBAAe,AAAD,EAAE;IACzC,MAAM,kBAAkB,eAAe,aAAa,QAAQ,GAAG,EAAE;IAEjE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,iBAAiB,EAAE,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE;QACrF,KAAK;QACL,IAAI;QACJ,iBAAiB;QACjB,QAAQ;gCAAE,CAAC;gBACT,4CAA4C;gBAC5C,MAAM,iBAAiB;uBAAI;oBAAU;iBAAQ;gBAC7C,MAAM,mBAAmB,eAAe,IAAI;yDAAC,CAAA,IAAK,EAAE,IAAI,KAAK;;gBAC7D,MAAM,QAAQ,cAAc,SAAS,CAAC,mBAAmB,iBAAiB,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,UAAU;gBAC/G,CAAA,GAAA,wIAAA,CAAA,mBAAgB,AAAD,EAAE,WAAW,OAAO;gBACjC,OAAO,aAAa,CAAC,IAAI,MAAM;YACnC;;IACF;IAEA,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;wCAAE,IAAM,sBAAsB;uCAAW;QAAC;KAAS;IAE5E,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,sIAAA,CAAA,UAAa;YACZ,UAAU;YACV,OAAO;YACP,mBAAmB;YACnB,cAAc;YACd,WAAW;YACX,OAAO,OAAO;YACd,WAAU;;;;;;;;;;;AAIlB;GArCwB;;QACP,qIAAA,CAAA,YAAS;QAOuD,gJAAA,CAAA,UAAO;;;KARhE","debugId":null}}]
}